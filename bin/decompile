#!/usr/bin/env python3

# Standard lib imports
from os.path import abspath, dirname, join
import sys
import fileinput
import argparse

parser = argparse.ArgumentParser(
           description="An EVM bytecode disassembly decompiler that generates"
                       " files for program analysis.")

parser.add_argument("-f",
                    "--file",
                    type=open,
                    help="input EVM bytecode disassembly file to decompile")

parser.add_argument("-p",
                    "--print",
                    action="store_true",
                    help="display Three-Address code output "
                         "(default if no other output specified)")

parser.add_argument("-g",
                    "--graph",
                    action="store_true",
                    help="generate .dot file of basic block relationships")

parser.add_argument("-t",
                    "--tsv",
                    action="store_true",
                    help="generate tab-separated .facts files for Souffle")

parser.add_argument("-v",
                    "--verbose",
                    action="store_true",
                    help="produce more verbose debug output")

args = parser.parse_args()

# Prepend ../src to $PATH so the project modules can be imported below
src_path = join(dirname(abspath(__file__)), "../src")
sys.path.insert(0, src_path)

# Local project imports
import blockparse
import exporter
import optimise
import tac_cfg
import logger

# Set global LOG_LEVEL if --verbose flag given
if args.verbose:
  logger.LOG_LEVEL = logger.Verbosity.HIGH

cfg = None

# Determine method of file input
if args.file == None:
  cfg = tac_cfg.TACGraph.from_dasm(fileinput.input())
else:
  cfg = tac_cfg.TACGraph.from_dasm(args.file)

# Apply optimisations
optimise.fold_constants(cfg)
cfg.recheck_jumps()

# Process command-line arguments to determine outputs
if args.graph:
  exporter.CFGDotExporter(cfg).export()
if args.tsv:
  exporter.CFGTsvExporter(cfg).export()
if args.print or (not args.graph and not args.tsv):
  exporter.CFGPrintExporter(cfg).export()
