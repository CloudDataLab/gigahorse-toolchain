// This file was generated by bin/generatefacts, do not edit

.decl PUSH3(stmt: Statement, value: Value)
.input PUSH3

.decl PUSH22(stmt: Statement, value: Value)
.input PUSH22

.decl SWAP13(stmt: Statement)
.input SWAP13

.decl PUSH24(stmt: Statement, value: Value)
.input PUSH24

.decl AND(stmt: Statement)
.input AND

.decl NOT(stmt: Statement)
.input NOT

.decl MOD(stmt: Statement)
.input MOD

.decl PUSH8(stmt: Statement, value: Value)
.input PUSH8

.decl ADDRESS(stmt: Statement)
.input ADDRESS

.decl DUP16(stmt: Statement)
.input DUP16

.decl SWAP11(stmt: Statement)
.input SWAP11

.decl JUMPDEST(stmt: Statement)
.input JUMPDEST

.decl CALLDATACOPY(stmt: Statement)
.input CALLDATACOPY

.decl PUSH25(stmt: Statement, value: Value)
.input PUSH25

.decl CALLDATALOAD(stmt: Statement)
.input CALLDATALOAD

.decl PUSH5(stmt: Statement, value: Value)
.input PUSH5

.decl PUSH30(stmt: Statement, value: Value)
.input PUSH30

.decl SAR(stmt: Statement)
.input SAR

.decl PUSH19(stmt: Statement, value: Value)
.input PUSH19

.decl EXTCODECOPY(stmt: Statement)
.input EXTCODECOPY

.decl DIV(stmt: Statement)
.input DIV

.decl PUSH21(stmt: Statement, value: Value)
.input PUSH21

.decl RETURN(stmt: Statement)
.input RETURN

.decl PUSH15(stmt: Statement, value: Value)
.input PUSH15

.decl SWAP2(stmt: Statement)
.input SWAP2

.decl PUSH27(stmt: Statement, value: Value)
.input PUSH27

.decl GT(stmt: Statement)
.input GT

.decl DUP15(stmt: Statement)
.input DUP15

.decl DUP4(stmt: Statement)
.input DUP4

.decl DUP13(stmt: Statement)
.input DUP13

.decl PC(stmt: Statement)
.input PC

.decl PUSH10(stmt: Statement, value: Value)
.input PUSH10

.decl CALLVALUE(stmt: Statement)
.input CALLVALUE

.decl LOG3(stmt: Statement)
.input LOG3

.decl NUMBER(stmt: Statement)
.input NUMBER

.decl PUSH2(stmt: Statement, value: Value)
.input PUSH2

.decl MSTORE8(stmt: Statement)
.input MSTORE8

.decl DUP14(stmt: Statement)
.input DUP14

.decl EXP(stmt: Statement)
.input EXP

.decl SWAP1(stmt: Statement)
.input SWAP1

.decl PUSH7(stmt: Statement, value: Value)
.input PUSH7

.decl PUSH12(stmt: Statement, value: Value)
.input PUSH12

.decl ADDMOD(stmt: Statement)
.input ADDMOD

.decl GASLIMIT(stmt: Statement)
.input GASLIMIT

.decl PUSH14(stmt: Statement, value: Value)
.input PUSH14

.decl DUP1(stmt: Statement)
.input DUP1

.decl OR(stmt: Statement)
.input OR

.decl PUSH13(stmt: Statement, value: Value)
.input PUSH13

.decl BALANCE(stmt: Statement)
.input BALANCE

.decl SWAP14(stmt: Statement)
.input SWAP14

.decl SHR(stmt: Statement)
.input SHR

.decl EQ(stmt: Statement)
.input EQ

.decl SWAP4(stmt: Statement)
.input SWAP4

.decl SMOD(stmt: Statement)
.input SMOD

.decl BYTE(stmt: Statement)
.input BYTE

.decl LT(stmt: Statement)
.input LT

.decl LOG4(stmt: Statement)
.input LOG4

.decl PUSH31(stmt: Statement, value: Value)
.input PUSH31

.decl BLOCKHASH(stmt: Statement)
.input BLOCKHASH

.decl SIGNEXTEND(stmt: Statement)
.input SIGNEXTEND

.decl DUP6(stmt: Statement)
.input DUP6

.decl SUB(stmt: Statement)
.input SUB

.decl LOG0(stmt: Statement)
.input LOG0

.decl GASPRICE(stmt: Statement)
.input GASPRICE

.decl SHL(stmt: Statement)
.input SHL

.decl MLOAD(stmt: Statement)
.input MLOAD

.decl PUSH32(stmt: Statement, value: Value)
.input PUSH32

.decl ORIGIN(stmt: Statement)
.input ORIGIN

.decl MUL(stmt: Statement)
.input MUL

.decl PUSH29(stmt: Statement, value: Value)
.input PUSH29

.decl PUSH4(stmt: Statement, value: Value)
.input PUSH4

.decl RETURNDATASIZE(stmt: Statement)
.input RETURNDATASIZE

.decl DUP7(stmt: Statement)
.input DUP7

.decl TIMESTAMP(stmt: Statement)
.input TIMESTAMP

.decl PUSH20(stmt: Statement, value: Value)
.input PUSH20

.decl SWAP16(stmt: Statement)
.input SWAP16

.decl PUSH28(stmt: Statement, value: Value)
.input PUSH28

.decl PUSH11(stmt: Statement, value: Value)
.input PUSH11

.decl COINBASE(stmt: Statement)
.input COINBASE

.decl SLOAD(stmt: Statement)
.input SLOAD

.decl DUP9(stmt: Statement)
.input DUP9

.decl EXTCODESIZE(stmt: Statement)
.input EXTCODESIZE

.decl CREATE(stmt: Statement)
.input CREATE

.decl CALLCODE(stmt: Statement)
.input CALLCODE

.decl DUP5(stmt: Statement)
.input DUP5

.decl SWAP5(stmt: Statement)
.input SWAP5

.decl JUMPI(stmt: Statement)
.input JUMPI

.decl CODESIZE(stmt: Statement)
.input CODESIZE

.decl REVERT(stmt: Statement)
.input REVERT

.decl SGT(stmt: Statement)
.input SGT

.decl SWAP10(stmt: Statement)
.input SWAP10

.decl DUP12(stmt: Statement)
.input DUP12

.decl PUSH17(stmt: Statement, value: Value)
.input PUSH17

.decl PUSH18(stmt: Statement, value: Value)
.input PUSH18

.decl ADD(stmt: Statement)
.input ADD

.decl CALL(stmt: Statement)
.input CALL

.decl SWAP3(stmt: Statement)
.input SWAP3

.decl RETURNDATACOPY(stmt: Statement)
.input RETURNDATACOPY

.decl DUP8(stmt: Statement)
.input DUP8

.decl PUSH1(stmt: Statement, value: Value)
.input PUSH1

.decl PUSH23(stmt: Statement, value: Value)
.input PUSH23

.decl DELEGATECALL(stmt: Statement)
.input DELEGATECALL

.decl PUSH16(stmt: Statement, value: Value)
.input PUSH16

.decl PUSH9(stmt: Statement, value: Value)
.input PUSH9

.decl STATICCALL(stmt: Statement)
.input STATICCALL

.decl CALLER(stmt: Statement)
.input CALLER

.decl LOG2(stmt: Statement)
.input LOG2

.decl SELFDESTRUCT(stmt: Statement)
.input SELFDESTRUCT

.decl JUMP(stmt: Statement)
.input JUMP

.decl GAS(stmt: Statement)
.input GAS

.decl SWAP15(stmt: Statement)
.input SWAP15

.decl TXGASPRICE(stmt: Statement)
.input TXGASPRICE

.decl DUP3(stmt: Statement)
.input DUP3

.decl POP(stmt: Statement)
.input POP

.decl XOR(stmt: Statement)
.input XOR

.decl INVALID(stmt: Statement)
.input INVALID

.decl SHA3(stmt: Statement)
.input SHA3

.decl STOP(stmt: Statement)
.input STOP

.decl SDIV(stmt: Statement)
.input SDIV

.decl SWAP6(stmt: Statement)
.input SWAP6

.decl ISZERO(stmt: Statement)
.input ISZERO

.decl SSTORE(stmt: Statement)
.input SSTORE

.decl DUP10(stmt: Statement)
.input DUP10

.decl DUP11(stmt: Statement)
.input DUP11

.decl PUSH26(stmt: Statement, value: Value)
.input PUSH26

.decl SWAP8(stmt: Statement)
.input SWAP8

.decl MULMOD(stmt: Statement)
.input MULMOD

.decl SLT(stmt: Statement)
.input SLT

.decl PUSH6(stmt: Statement, value: Value)
.input PUSH6

.decl MSTORE(stmt: Statement)
.input MSTORE

.decl SWAP9(stmt: Statement)
.input SWAP9

.decl SWAP7(stmt: Statement)
.input SWAP7

.decl SWAP12(stmt: Statement)
.input SWAP12

.decl CODECOPY(stmt: Statement)
.input CODECOPY

.decl LOG1(stmt: Statement)
.input LOG1

.decl DUP2(stmt: Statement)
.input DUP2

.decl MSIZE(stmt: Statement)
.input MSIZE

.decl CALLDATASIZE(stmt: Statement)
.input CALLDATASIZE

.decl DIFFICULTY(stmt: Statement)
.input DIFFICULTY

.decl OpcodeIsDup(instruction: Opcode)
.input OpcodeIsDup

.decl OpcodeIsInvalid(instruction: Opcode)
.input OpcodeIsInvalid

.decl OpcodeStackDelta(instruction: Opcode, n: number)
.input OpcodeStackDelta

.decl OpcodeIsArithmetic(instruction: Opcode)
.input OpcodeIsArithmetic

.decl OpcodeIsLog(instruction: Opcode)
.input OpcodeIsLog

.decl OpcodePopWords(instruction: Opcode, n: number)
.input OpcodePopWords

.decl OpcodeOrd(instruction: Opcode, n: number)
.input OpcodeOrd

.decl OpcodeAltersFlow(instruction: Opcode)
.input OpcodeAltersFlow

.decl OpcodeIsCall(instruction: Opcode)
.input OpcodeIsCall

.decl OpcodePushWords(instruction: Opcode, n: number)
.input OpcodePushWords

.decl OpcodeIsPush(instruction: Opcode)
.input OpcodeIsPush

.decl OpcodePossiblyHalts(instruction: Opcode)
.input OpcodePossiblyHalts

.decl OpcodeIsStorage(instruction: Opcode)
.input OpcodeIsStorage

.decl OpcodeLogLen(instruction: Opcode, n: number)
.input OpcodeLogLen

.decl OpcodeHalts(instruction: Opcode)
.input OpcodeHalts

.decl OpcodeIsMemory(instruction: Opcode)
.input OpcodeIsMemory

.decl OpcodeIsSwap(instruction: Opcode)
.input OpcodeIsSwap

.decl OpcodeGas(instruction: Opcode, n: number)
.input OpcodeGas

.decl OpcodePushLen(instruction: Opcode, n: number)
.input OpcodePushLen

.decl OpcodeIsMissing(instruction: Opcode)
.input OpcodeIsMissing

