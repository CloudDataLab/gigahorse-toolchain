#define MAX_FUNCTION_ARGS (MAX_STACK_HEIGHT/4)

#include "PublicFunctionSignature.dl"
 
/*****
 * Function discovery logic
 *****/

/******
  * First, heuristics for discovering public functions
******/
// Special entry point to public function found heuristically
.decl PublicFunctionEntry(basicBlock: Block, sigHash: Value)
// Code inserted by compiler to dispatch to the correct public function
.decl PublicFunctionDispatcher(basicBlock: Block, sigHash: Value)
// (Possibly) Code inserted by compiler to compare function signature
.decl BlockComparesSig(block: Block, sigHash: Value)

// Compares label from stack to a constant: common public function dispatch
// pattern
BlockComparesSig(block, sigHash) :-
  Statement_Block(pushStmt, block),
  PUSH4(pushStmt, sigHash),
  Statement_Defines(pushStmt, sigHashVar),
  Statement_Block(eqStmt, block),
  EQ(eqStmt),
  Statement_Uses(eqStmt, sigHashVar, _),
  Statement_Block(jumpiStmt, block),
  JUMPI(jumpiStmt),
  Statement_Defines(eqStmt, pred),
  Statement_Uses(jumpiStmt, pred, 1).

// Initial case, uses CALLDATALOAD
PublicFunctionDispatcher(block, sigHash) :-
  Statement_Block(stmt, block),
  CALLDATALOAD(stmt),
  BlockComparesSig(block, sigHash).

// General case
PublicFunctionDispatcher(block, sigHash) :-
  BlockComparesSig(block, sigHash),
  BlockEdge(_, prev, _, block),
  PublicFunctionDispatcher(prev, _).

PublicFunctionEntry(stmtBlock, sigHash) :-
  PublicFunctionDispatcher(block, sigHash),
  Statement_Block(jumpiStmt, block),
  JUMPI(jumpiStmt),
  BeforeLocalStackContents(jumpiStmt, _, labelvar),
  Variable_Value(labelvar, label),
  IsBasicBlockHead(stmt),
  CastStatementToBlock(stmt, stmtBlock),
  ord(label) = ord(stmt).


/******
         Generic basic block Reachable-from implementation
******/

.decl ReachableFrom(block:Block, from:Block)

ReachableFrom(block, block) :- Statement_Block(_, block).

ReachableFrom(blockNext, blockPrev) :-
  ReachableFrom(block, blockPrev),
  BlockEdge(_, block, _, blockNext). 


/******
         Heuristics for detecting call-return patterns
******/

.decl PossibleReturnAddress(caller:Block, ret:Block, target:Block)

// Possibly a return:
// a) basic block jumps to a valid "non-locally-derived" address
// b) address originates at a caller that can reach the
//    returning basic block.
PossibleReturnAddress(callerBlock, retBlock, target) :-
  BlockJumpValidTarget(_, retBlock, targetVariable, target),
  BasicBlock_Tail(callerBlock, callerStmt),
  callerBlock != retBlock,
  IsJump(callerStmt),
  Statement_Defines(otherCallerStatement, targetVariable),
  Statement_Block(otherCallerStatement, callerBlock).


.decl PossibleFunctionCall(caller:Block, func:Block, retBlock:Block, retTarget:Block)

PossibleFunctionCall(caller, func, retBlock, retTarget) :-
  PossibleReturnAddress(caller, retBlock, retTarget),
  BlockJumpValidTarget(_, caller, _, func).

.decl PossiblyInFunction(block:Block, func:Block)

// Which basic blocks belong to which function
PossiblyInFunction(func, func) :-
  PossibleFunctionCall(_, func, _, _).

// In this case we're moving onto another function
PossiblyInFunction(next, func) :-
  PossiblyInFunction(block, func),
  BlockEdge(_, block, _, next),
  !PossibleFunctionCall(block, _, _, _).

// In this case we're return from a function we've just called
PossiblyInFunction(retTarget, func) :-
  PossiblyInFunction(block, func),
  PossibleFunctionCall(block, _, _, retTarget).

// What is a function?
// A function has to have a single entry point

.decl NotRegularFunction(func:Block)

// A basic block can only belong to a single function
// Solution: Pick one!
NotRegularFunction(func2) :-
  PossiblyInFunction(block, func1),
  PossiblyInFunction(block, func2),
  ord(func1) > ord(func2).

// A function can only be entered by calling it
NotRegularFunction(func) :-
  PossiblyInFunction(_, func),
  BlockEdge(_, caller, _, func),
  !PossibleFunctionCall(caller, func, _, _).


// caller calls func and func returns to retTarget
.decl FunctionCallReturn(caller:Block, func:Block, retTarget:Block)
.decl Function_Return(func:Block, retBlock:Block)

Function_Return(func, retBlock),
FunctionCallReturn(caller, func, retTarget) :-
  PossibleFunctionCall(caller, func, retBlock, retTarget),
  !NotRegularFunction(func).


// Further function decomposition.
// Detects function boundaries, calls and returns iteratively.  Main
// heuristic: if a block is reachable by two others that have to be in
// different functions, then that block is also in an independent
// function.

// Used components to force stratification.
.comp FunctionDetection {
  // An Entry to a function (private or public)
  .decl FunctionEntry(block: Block)
  // Same, but for previous iteration of the algorithm   
  .decl PrevFunctionEntry(block: Block)

  // Basic block belongs to function
  .decl InFunction(block: Block, function: Block)
  // Basic block performs a function call 
  .decl FunctionCall(block: Block, func: Block)
   // Same, but for previous iteration of the algorithm   
  .decl PrevFunctionCall(block: Block, func: Block)

  InFunction(block, block) :-
    PrevFunctionEntry(block).

  InFunction(next, func) :-
    InFunction(block, func),
    BlockEdge(_, block, _, next),
    !PrevFunctionCall(block, next),
    !Function_Return(_, block).

 InFunction(next, func) :-
   InFunction(block, func),
   FunctionCallReturn(block, _, next).

  // Heuristic for finding function calls
  // Execution flows to a basic block that is
  // part of more than one function, TODO
  FunctionCall(prev, block),
  FunctionEntry(block) :-
    InFunction(block, func1),
    InFunction(block, func2),
    func1 != func2,
    BlockEdge(_, prev, _, block),
    !Function_Return(_, prev),
    !(InFunction(prev, func1), InFunction(prev, func2)).

  FunctionCall(prev, func1) :- PrevFunctionCall(prev, func1).
}

// Initialize and iterate the algorithm
.init detector0 = FunctionDetection
detector0.PrevFunctionEntry(block) :-
  PublicFunctionEntry(block, _).
detector0.PrevFunctionEntry(block) :-
  FunctionCallReturn(_, block, _).

detector0.PrevFunctionCall(prev, func) :-
  PublicFunctionEntry(func, sigHash),
  PublicFunctionDispatcher(prev, sigHash).

detector0.PrevFunctionCall(prev, func) :-
  FunctionCallReturn(prev, func, _).
  
.init detector1 = FunctionDetection
detector1.PrevFunctionEntry(block) :- detector0.FunctionEntry(block).
detector1.PrevFunctionCall(block, func) :- detector0.FunctionCall(block, func).

.init detector2 = FunctionDetection
detector2.PrevFunctionEntry(block) :- detector1.FunctionEntry(block).
detector2.PrevFunctionCall(block, func) :- detector1.FunctionCall(block, func).

/***********
   Collecting all function decomposition results
***********/

// block ends with a call to func
.decl FunctionCall(block:Block, func:Block)

// Case 1: private call return
FunctionCall(block, func) :- FunctionCallReturn(block, func, _).

// Case 2: dispatch public functions
FunctionCall(block, func) :-
  PublicFunctionEntry(func, sigHash),
  PublicFunctionDispatcher(block, sigHash).

// Case 3: further decomposition using components
FunctionCall(block, func) :-
  detector0.FunctionCall(block, func) ;
  detector1.FunctionCall(block, func) ;
  detector2.FunctionCall(block, func).

.decl Function(func:Block)

// Case 1: Smart contract entry
Function(FUNCTION_SELECTOR).

// Remaining cases handled by inputs/outputs of componenets
Function(func) :-
  detector0.PrevFunctionEntry(func) ;
  detector0.FunctionEntry(func) ;
  detector1.FunctionEntry(func) ;
  detector2.FunctionEntry(func).


/***********
 * Discovery of arguments accepted by a function   
 ***********/

// Intra-function edges (i.e., real CFG edges)
.decl LocalBlockEdge(block: Block, next: Block)

LocalBlockEdge(block, next) :-
  BlockEdge(_, block, _, next),
  !Function(next),
  !Function_Return(_, block).

// REVIEW: basic blocks are interrupted at function call instructions
// (unlike, say, LLVM IR) but we connect the block to the one after
// the function return.
LocalBlockEdge(block, next) :-
  BlockEdge(_, block, _, func),
  FunctionCallReturn(block, func, next).

// New Instructions
// CALLPRIVATE(stmt, function)
// CALLPRIVATEI(stmt, cond, function)
// RETURNPRIVATE(stmt)
// RETURNPRIVATEI(stmt, cond)

.decl InFunction(block: Block, func: Block)
 
InFunction(block, block) :-
  Function(block).

InFunction(next, func) :-
  InFunction(block, func),
  LocalBlockEdge(block, next).

.decl NumberOfFunctionArguments(func: Block, num: StackIndex)
.output NumberOfFunctionArguments
.decl NumberOfFunctionReturnArguments(func: Block, num: StackIndex)

.decl EnhancedLocalBlockEdge(from: Block, to: Block)

EnhancedLocalBlockEdge(from, to) :- LocalBlockEdge(from, to).

EnhancedLocalBlockEdge(from, "invalid") :- InFunction(from, _), !LocalBlockEdge(from, _).

EnhancedLocalBlockEdge(from, "invalid") :- Function_Return(_, from).

.decl EdgePopDelta(from: Block, to: Block, delta: StackIndex)

EdgePopDelta(from, to, delta) :-
   EnhancedLocalBlockEdge(from, to),
   BlockEdge(_, from, _, to),
   BlockPopDelta(from, delta).

EdgePopDelta(from, to, delta) :-
   EnhancedLocalBlockEdge(from, to),
   !FunctionCall(from, _),
   BlockPopDelta(from, delta).

EdgePopDelta(from, to, newPopDelta) :-
   EnhancedLocalBlockEdge(from, to),
   !BlockEdge(_, from, _, to),
   FunctionCall(from, func),
   NumberOfFunctionArguments(func, n_args),
   BlockPopDelta(from, popDelta),
   BlockStackDelta(from, stackDelta),
   newPopDelta = n_args-stackDelta,
   newPopDelta < MAX_STACK_HEIGHT,
   newPopDelta >= popDelta.

EdgePopDelta(from, to, popDelta) :-
   EnhancedLocalBlockEdge(from, to),
   !BlockEdge(_, from, _, to),
   FunctionCall(from, func),
   NumberOfFunctionArguments(func, n_args),
   BlockPopDelta(from, popDelta),
   BlockStackDelta(from, stackDelta),
   newPopDelta = n_args-stackDelta,
   newPopDelta < popDelta.

.decl EdgeStackDelta(from: Block, to: Block, delta: StackIndex)

EdgeStackDelta(from, to, newStackDelta) :-
   CompositeNumberOfFunctionAndReturnArguments(func, n_args, n_ret),
   EnhancedLocalBlockEdge(from, to),
   !BlockEdge(_, from, _, to),
   FunctionCall(from, func),
   BlockStackDelta(from, stackDelta),
   newStackDelta = stackDelta-n_args+n_ret,
   newStackDelta < MAX_STACK_HEIGHT,
   newStackDelta > -MAX_STACK_HEIGHT.

EdgeStackDelta(from, to, stackDelta) :-
   EnhancedLocalBlockEdge(from, to),
   BlockEdge(_, from, _, to),
   BlockStackDelta(from, stackDelta).

EdgeStackDelta(from, to, stackDelta) :-
   EnhancedLocalBlockEdge(from, to),
   !FunctionCall(from, _),
   BlockStackDelta(from, stackDelta).

.decl FunctionEdgePopDelta(from: Block, to: Block, delta: StackIndex)

FunctionEdgePopDelta(from, to, delta) :-
   Function(from),
   EdgePopDelta(from, to, delta).


.decl OptEdgePopDeltas(from: Block, to: Block, prevPopDelta: StackIndex, prevStackDelta: StackIndex, delta: StackIndex)

OptEdgePopDeltas(from, to, prevPopDelta, prevStackDelta, delta) :-
   FunctionEdgePopDelta(prev, from, prevPopDelta),
   FunctionEdgeStackDelta(prev, from, prevStackDelta),
   EdgePopDelta(from, to, delta),
   LocalBlockEdge(prev, from).
   .plan 1:(2,1,3,4), 2:(3,1,2,4)
   
FunctionEdgePopDelta(from, to, newPopDelta) :-
   OptEdgePopDeltas(from, to, prevPopDelta, prevStackDelta, delta),
   newPopDelta = delta - prevStackDelta,
   newPopDelta > prevPopDelta,
   newPopDelta < MAX_STACK_HEIGHT.

FunctionEdgePopDelta(from, to, delta) :-
   OptEdgePopDeltas(from, to, prevPopDelta, prevStackDelta, delta),
   newPopDelta = delta - prevStackDelta,
   newPopDelta <= prevPopDelta.

.decl FunctionEdgeStackDelta(from: Block, to: Block, delta: StackIndex)

FunctionEdgeStackDelta(from, to, delta) :-
   EdgeStackDelta(from, to, delta),
   Function(from).

FunctionEdgeStackDelta(from, to, newStackDelta) :-
   LocalBlockEdge(prev, from),
   FunctionEdgeStackDelta(prev, from, prevStackDelta),
   EdgeStackDelta(from, to, delta),
   newStackDelta = delta + prevStackDelta,
   newStackDelta < MAX_STACK_HEIGHT,
   newStackDelta > -MAX_STACK_HEIGHT.

.decl FunctionEdgePushDelta(from: Block, to: Block, delta: StackIndex)

FunctionEdgePushDelta(from, to, stackDelta + popDelta) :-
   FunctionEdgePopDelta(from, to, popDelta),
   FunctionEdgeStackDelta(from, to, stackDelta).

// We mostly care about a function's signature when it returns
NumberOfFunctionArguments(func, delta) :-
   FunctionEdgePopDelta(ret, "invalid", delta),
   Function_Return(func, ret).

NumberOfFunctionArguments(func, delta) :-
   FunctionEdgePopDelta(block, "invalid", delta),
   InFunction(func, block),
   !Function_Return(func, _).

// Same here
NumberOfFunctionArguments(func, delta) :-
   FunctionEdgePopDelta(block, "invalid", delta),
   InFunction(block, func).

NumberOfFunctionReturnArguments(func, delta) :-
   FunctionEdgePushDelta(ret, "invalid", delta),
   Function_Return(func, ret).

// default
NumberOfFunctionReturnArguments(func, 0) :-
   Function(func),
   !Function_Return(func, _).

.decl CandidateNumberOfFunctionArguments(func: Block, n: StackIndex)
CandidateNumberOfFunctionArguments(func, n) :-
   Function(func),
   n = min delta : NumberOfFunctionArguments(func, delta).

// This may improve precision, see further rant below
.decl CompositeNumberOfFunctionAndReturnArguments(func: Block, n_in: StackIndex, n_out: StackIndex)

CompositeNumberOfFunctionAndReturnArguments(func, n_in, n_out) :-
   FunctionEdgePopDelta(ret, "invalid", n_in),
   FunctionEdgePushDelta(ret, "invalid", n_out),
   Function_Return(func, ret).

// SANITY CHECKING 
.decl InexactFunctionArguments(func: Block)
.decl InexactFunctionReturnArguments(func: Block)

.output InexactFunctionArguments
.output InexactFunctionReturnArguments

.decl ExactFunctionArguments(func: Block)
.decl ExactFunctionReturnArguments(func: Block)

.output ExactFunctionArguments
.output ExactFunctionReturnArguments

ExactFunctionArguments(func) :-
   NumberOfFunctionArguments(func, _),
   !InexactFunctionArguments(func).

ExactFunctionReturnArguments(func) :-
   NumberOfFunctionReturnArguments(func, _),
   !InexactFunctionReturnArguments(func).

InexactFunctionArguments(func) :-
   NumberOfFunctionArguments(func, delta),
   NumberOfFunctionArguments(func, delta2),
   delta != delta2.

InexactFunctionReturnArguments(func) :-
   NumberOfFunctionReturnArguments(func, delta),
   NumberOfFunctionReturnArguments(func, delta2),
   delta != delta2.

NumberOfFunctionArguments(FUNCTION_SELECTOR, 0).

//TODO
.decl Variable_String(var:Variable, var_rep:symbol)
.decl FunctionCallStmt(stmt: Statement)

FunctionCallStmt(stmt) :-
   FunctionCall(block, _),
   IsJump(stmt),
   BasicBlock_Tail(block, stmt).
   
.decl FunctionReturnStmt(stmt: Statement)

FunctionReturnStmt(stmt) :-
   Function_Return(_, block),
   IsJump(stmt),
   BasicBlock_Tail(block, stmt).
   
.decl FunctionArgument(func: Block, n: StackIndex, var: Variable)
.decl FunctionCallReturnArgument(func: Block, n: StackIndex, var: Variable)

.decl FunctionalStatement_Uses_Local(stmt:Statement, var:VariableOrStackIndex, n:StackIndex)

.decl FunctionalStatement_Uses(stmt:Statement, var:Variable, n:StackIndex)

Variable_String(var, var_rep) :-
   Statement_Defines(var_rep, var).

Variable_String(var, cat("arg",n_str)),
FunctionArgument(funcBlock, n, var) :-
  CandidateNumberOfFunctionArguments(funcBlock, n_args),
  IsStackIndexLessThan(n, n_args),
  CastStatementToBlock(stmt, funcBlock),
  FRESH_VARIABLE(var, stmt, n),
  StackIndexToString(n, n_str).

Variable_String(newVar, cat(callStmt, cat("_", n_str))),
FunctionalStatement_Defines(callStmt, newVar, n),
FunctionCallReturnArgument(caller, n, newVar) :-
  FunctionCall(caller, func),
  NumberOfFunctionReturnArguments(func, n_arg),
  IsStackIndexLessThan(n, n_arg),
  BasicBlock_Tail(caller, callStmt),
  FRESH_VARIABLE(newVar, callStmt, n),
  StackIndexToString(n, n_str).

// Renaming variables in functions
// Involves Propagating variables, but doesn't require re-computing the CFG
.decl FunctionalBlockInputContents(block:Block, index:number, var:Variable)
.decl FunctionalBlockOutputContents(block:Block, next: Block, index:number, var:Variable)

FunctionalBlockInputContents(func, n, var) :-
   FunctionArgument(func, n, var).

FunctionalBlockInputContents(next, index, variable) :-
  FunctionalBlockOutputContents(_, next, index, variable).

//TODO: output contents should be edge-based not block-based

// 1) Normal block to block flow, i.e. no unconditional function calls from block to block
FunctionalBlockOutputContents(block, next, index, variable) :-
  BeforeFunctionCallFunctionalBlockOutputContents(block, index, variable),
  EnhancedLocalBlockEdge(block, next),
  BlockEdge(_, block, _, next).

// 2) Same, but for return blocks
FunctionalBlockOutputContents(block, next, index, variable) :-
   BeforeFunctionCallFunctionalBlockOutputContents(block, index, variable),
   EnhancedLocalBlockEdge(block, next),
   !FunctionCall(block, _).

// 3) First block calls a function, take return args from function call
.decl FunctionalStatement_Defines(callStmt:Statement, newVar:Variable, n: number)

FunctionalBlockOutputContents(caller, next, n, newVar) :-
   FunctionCallReturnArgument(caller, n, newVar),
   // Note, we can ignore the exact identity of the called function,
   // As fresh variables will be the same, we only care about the number of
   // return arguments. With more sophisticated analysis, this could change.
   FunctionCallReturn(caller, _, next).

// 4) First block calls a function, take any remaining variables that have
//    not been passed as arguments, and shift
FunctionalBlockOutputContents(caller, next, newIndex, variable) :-
   BeforeFunctionCallFunctionalBlockOutputContents(caller, index, variable),
   FunctionCallReturn(caller, func, next),
   // Why do we need all this complexity? At first I modelled this by
   // considering the cross product of possible number of args, but
   // later created the notion of a composite function signature.
   // Should improve precision in some cases
   //CompositeNumberOfFunctionAndReturnArguments(func, n_in, n_out),
   NumberOfFunctionReturnArguments(func, n_out),
   CandidateNumberOfFunctionArguments(func, n_in),
   index >= n_in,
   newIndex = index+n_out-n_in,
   newIndex >= 0,
   newIndex < MAX_STACK_HEIGHT.

.decl BeforeFunctionCallFunctionalBlockOutputContents(caller: Block, index: StackIndex, variable: Variable)

// Copy the stack variables untouched by the callee basic block
BeforeFunctionCallFunctionalBlockOutputContents(callee, index+delta, variable) :-
  FunctionalBlockInputContents(callee, index, variable),
  index >= calleePopLen,
  index+delta <= MAX_STACK_HEIGHT,
  BlockPopDelta(callee, calleePopLen),
  BlockStackDelta(callee, delta).

// Handle the proper variables pushed by this basic block
BeforeFunctionCallFunctionalBlockOutputContents(block, index, var) :-
  InFunction(block, _),
  BasicBlock_Tail(block, stmt),
  LocalStackContents(stmt, index, var),
  CheckIsVariable(var).

// Handle the stackIndexes pushed by this basic block
BeforeFunctionCallFunctionalBlockOutputContents(block, index, realVariable) :-
  FunctionalBlockInputContents(block, stackIndex, realVariable),
  BasicBlock_Tail(block, stmt),
  LocalStackContents(stmt, index, stackIndex),
  CheckIsStackIndex(stackIndex).


// TODO, check case for function call
FunctionalStatement_Uses_Local(stmt, varOrStackIndex, n) :-
  FunctionCall(block, func),
  BasicBlock_Tail(block, stmt),
  Statement_Opcode(stmt, opcode),
  OpcodePopWords(opcode, m),
  CandidateNumberOfFunctionArguments(func, n_in),
  IsStackIndexLessThan(n, m+n_in),
  BeforeLocalStackContents(stmt, n, varOrStackIndex).

// TODO, check case for function return
FunctionalStatement_Uses_Local(stmt, varOrStackIndex, n) :-
  NumberOfFunctionReturnArguments(func, n_out),
  Function_Return(func, retBlock),
  BasicBlock_Tail(retBlock, stmt),
  Statement_Opcode(stmt, opcode),
  OpcodePopWords(opcode, m),
  IsStackIndexLessThan(n, m+n_out),
  BeforeLocalStackContents(stmt, n, varOrStackIndex).

FunctionalStatement_Uses_Local(stmt, varOrStackIndex, n) :-
   Statement_Uses_Local(stmt, varOrStackIndex, n).

FunctionalStatement_Uses(stmt, var, n) :-
   Statement_Uses_Local(stmt, var, n),
   CheckIsVariable(var).

FunctionalStatement_Defines(stmt, newVar, 0) :- Statement_Defines(stmt, newVar).

// Case: variable originates elsewhere
FunctionalStatement_Uses(stmt, var, n) :-
   Statement_Uses_Local(stmt, stackIndex, n),
   CheckIsStackIndex(stackIndex),
   Statement_Block(stmt, block),
   FunctionalBlockInputContents(block, stackIndex, var).

.decl HighLevelFunctionName(func: Block, name: symbol)

HighLevelFunctionName(FUNCTION_SELECTOR, "__function_selector__").

HighLevelFunctionName(func, name) :-
   PublicFunctionEntry(func, sigHash),
   PublicFunctionSignature(sigHash, name).

HighLevelFunctionName(func, name) :-
   PublicFunctionEntry(func, name),
   !PublicFunctionSignature(name, _).

HighLevelFunctionName(func, func) :-
   Function(func),
   !PublicFunctionEntry(func, _).
