#define MAX_FUNCTION_ARGS (MAX_STACK_HEIGHT/4)
#define FRESH_VARIABLE(var, stmt, stackIndex) (IRStatementNum((stmt), _stmtNum), var=-0xFFFF+_stmtNum*MAX_STACK_HEIGHT+(stackIndex))

/*****
 * Function discovery logic
 *****/

/******
  * First, heuristics for discovering public functions
******/
// Special entry point to public function found heuristically
.decl PublicFunction(basicBlock: Block, sigHash: Value)

// Code inserted by compiler to compare function signature
.decl BlockComparesSig(block: Block, sigHash: Value)

.decl FunctionSelectorVariable(var: Variable)

FunctionSelectorVariable(var) :-
  CALLDATALOAD(stmt), 
  Statement_Uses(stmt, index, _),
  Variable_Value(index, "0x0"),
  Statement_Defines(stmt, var).

FunctionSelectorVariable(y) :-
   FunctionSelectorVariable(x),
   Statement_Uses(stmt, x, _),
   Statement_Defines(stmt, y).

// Compares label from stack to a constant: common public function dispatch
// pattern
BlockComparesSig(block, sigHash) :-
  Statement_Block(pushStmt, block),
  PUSH4(pushStmt, sigHash),
  Statement_Defines(pushStmt, sigHashVar),
  Statement_Block(eqStmt, block),
  EQ(eqStmt),
  Statement_Uses(eqStmt, sigHashVar, _),
  Statement_Uses(eqStmt, functionSelectorVar, _),
  FunctionSelectorVariable(functionSelectorVar),
  Statement_Block(jumpiStmt, block),
  JUMPI(jumpiStmt),
  Statement_Defines(eqStmt, pred),
  Statement_Uses(jumpiStmt, pred, 1).

PublicFunction(CAST_TO_SYMBOL(label), sigHash) :-
  BlockComparesSig(block, sigHash),
  Statement_Block(jumpiStmt, block),
  JUMPI(jumpiStmt),
  BeforeLocalStackContents(jumpiStmt, _, labelvar),
  Variable_Value(labelvar, label),
  JUMPDEST(CAST_TO_SYMBOL(label)).


/******
         Generic basic block Reachable-from implementation
******/

.decl ReachableFrom(block:Block, from:Block)

ReachableFrom(block, block) :- Statement_Block(_, block).

ReachableFrom(blockNext, blockPrev) :-
  ReachableFrom(block, blockPrev),
  BlockEdge(_, block, _, blockNext). 

.decl ReachableFromUnderContext(ctx: Context, block: Block, fromCtx: Context, from:Block)

ReachableFromUnderContext(ctx, block, ctx, block) :-
  ReachableContext(ctx, block).

ReachableFromUnderContext(ctxTo, blockTo, ctxFrom, blockFrom) :-
  ReachableFromUnderContext(ctxOther, blockOther, ctxFrom, blockFrom),
  BlockEdge(ctxOther, blockOther, ctxTo, blockTo).


/******
         Heuristics for detecting call-return patterns
******/

// A high-level call can only be translated into an immediate jump.
// More complex jumps (e.g., through basic blocks that just keep
// whatever was on the stack and jump to it) are technicalities for
// inlining.
.decl PotentialCall(caller:Block)
PotentialCall(block) :-
  ImmediateBlockJumpTarget(block, _).

.output PotentialCall // DEBUG

// Call-return pattern:
// a) basic block jumps to a valid "non-locally-derived" address
// b) address originates at a target-setter.
.decl PossibleReturnAddress(caller:Block, ret:Block, target:Block)
PossibleReturnAddress(targetSetter, retBlock, retTarget) :-
  BlockJumpValidTarget(_, retBlock, targetVariable, retTarget),
  !ImmediateBlockJumpTarget(retBlock, targetVariable),
  Statement_Defines(targetSetStatement, targetVariable),
  Statement_Block(targetSetStatement, targetSetter),
  BasicBlock_Tail(targetSetter, jumpStmt),
  IsJump(jumpStmt).

.output PossibleReturnAddress // DEBUG

// Also match a subset of those with return addresses and full info. The
// function may not be the one containing the return, in case of complex
// call patterns (e.g., call-call, or call-return).
.decl MaybeFunctionCallReturn(caller:Block, func:Block, retBlock:Block, retTarget:Block)
MaybeFunctionCallReturn(caller, func, retBlock, retTarget) :-
  PossibleReturnAddress(caller, retBlock, retTarget),
  ImmediateBlockJumpTarget(caller, targetVar),
  BlockJumpValidTarget(_, caller, targetVar, func).

.output MaybeFunctionCallReturn // DEBUG

// Seems pretty certain we found a return. In fact, at this point,
// with the above logic, we have detected all original return
// instructions in the code. There will be artificial returns added
// later, for calls that end up being tail calls.
// It's important to note that a statement may be a return with respect
// to one edge, but not with respect to others. There are many conditional
// returns.
.decl IsReturn(ret:Block, target:Block)
IsReturn(retBlock, retTarget) :-
  IsFunctionCallReturn(_, _, retBlock, retTarget).

// In this case the complete vs. precise version doesn't seem to be
// making much of a difference. 
.decl MaybeReturn(ret:Block, target:Block)
MaybeReturn(retBlock, retTarget) :-
  PossibleReturnAddress(_, retBlock, retTarget).

.output IsReturn


// Filtering for sanitization. The logic following can be arbitrarily
// restrictive. We have all potential calls and all returns, now we
// want to match them to each other and form cohesive functions (both
// for the caller and for the callee) only with very high certainty.

// What is a function?
// 1) A function has to have a single entry point
// 2) Has to be called multiple times
// 3) Return block belongs to one function
// 4) If code is inlined it's something else

.decl FunctionCalledMultipleTimes(func: Block)
FunctionCalledMultipleTimes(func) :-
  MaybeFunctionCallReturn(caller, func, retBlock, _),
  MaybeFunctionCallReturn(caller2, func, retBlock, _),
  caller != caller2.

// Return block can only pertain to one function!
.decl NotValidReturnBlock(func: Block, retBlock: Block) 
NotValidReturnBlock(func, retBlock) :-
  MaybeFunctionCallReturn(_, func, retBlock, _),
  MaybeFunctionCallReturn(_, func2, retBlock, _),
  ord(func) < ord(func2).

// Block reached from return edge cannot also be called directly
.decl NotValidReturnEdge(retBlock: Block, retTarget: Block)
NotValidReturnEdge(retBlock, retTarget) :-
  MaybeFunctionCallReturn(_, _, retBlock, retTarget),
  MaybeFunctionCallReturn(_, retTarget, _, _).

// Caller calls func and func returns to retTarget. Should only be inferred with
// high confidence.
.decl IsFunctionCallReturn(caller:Block, func:Block, retBlock:Block, retTarget:Block)
IsFunctionCallReturn(caller, func, retBlock, retTarget) :-
  MaybeFunctionCallReturn(caller, func, retBlock, retTarget),
  FunctionCalledMultipleTimes(func),
  !NotValidReturnBlock(func, retBlock),
  !NotValidReturnEdge(retBlock, retTarget).

.output IsFunctionCallReturn // DEBUG


// NOTE the philosophy!  MaybeFunctionCallReturn intends to be
// complete, IsFunctionCallReturn intends to be precise.  Be careful when
// using the one vs. the other! Their balance is crucial.

/// Let's try something dead simple for assigning blocks to functions.

.decl IsFunctionEntry(entry:Block)
IsFunctionEntry(block) :- PublicFunction(block, _).
IsFunctionEntry(FUNCTION_SELECTOR).
IsFunctionEntry(func) :- IsFunctionCallReturn(_, func, _, _).

.decl IsFunctionCall(block:Block, func:Block)
   
IsFunctionCall(prev, func) :-
  PublicFunction(func, sigHash),
  BlockComparesSig(prev, sigHash).

// Use the precise version here!
IsFunctionCall(block, func) :-
  IsFunctionCallReturn(block, func, _, _).

// Low-hanging fruit of context-sensitive reasoning
.decl MaybeInFunctionUnderContext(ctx: Context, block:Block, func:Block)
MaybeInFunctionUnderContext(ctx, block, block) :-
  IsFunctionEntry(block),
  ReachableContext(ctx, block).

MaybeInFunctionUnderContext(ctx, next, func) :-
  MaybeInFunctionUnderContext(prevCtx, block, func),
  BlockEdge(prevCtx, block, ctx, next),
  !IsFunctionCall(block, next),
  !IsReturn(block, next).

MaybeInFunctionUnderContext(ctx, next, func) :-
  MaybeInFunctionUnderContext(_, block, func),
  // Use the complete version here!
  MaybeFunctionCallReturn(block, _, _, next),
  ReachableFromUnderContext(_, block, ctx, next).

.decl MaybeInFunction(block:Block, func:Block)
MaybeInFunction(block, func) :-
  MaybeInFunctionUnderContext(_, block, func).

.decl BlockInMultipleFunctions(entry: Block)
BlockInMultipleFunctions(block) :-
  MaybeInFunction(block, func1),
  MaybeInFunction(block, func2),
  func1 != func2.


// For this function, the block should be inlined.
.decl BlockToClone(block: Block, func: Block)
BlockToClone(next, func) :-
  MaybeInFunction(next, func),
  BlockInMultipleFunctions(next).


.output IsFunctionEntry, IsFunctionCall, BlockToClone // DEBUG



/***********
 * Introduce new IR
 ***********/
#define FRESH_IRBLOCK(b, f) cat((b), (f))
#define FRESH_IRSTATEMENT(s, f) cat((s), (f))
#define BLOCK_TO_IRBLOCK CAST_TO_SYMBOL
#define STATEMENT_TO_IRSTATEMENT CAST_TO_SYMBOL
#define FUNCTION_TO_IRFUNCTION CAST_TO_SYMBOL
 
.type IRBlock
// exploit type checking in new IR
#define IRFunction IRBlock
.type IRStatement

.decl Block_IRBlock(block: Block, func: Block, irblock: IRBlock)
.decl Function_IRFunction(func: Block, irFunc: IRFunction)
.decl IRInFunction(block: IRBlock, func: IRFunction)
.decl IRFunctionEntry(irEntry: IRBlock)

// Let's first settle what belongs in which function,
// i.e., the nodes of our graph. Clone blocks as needed.

Function_IRFunction(funcentry, irEntry),
IRFunctionEntry(irEntry) :-
  IsFunctionEntry(funcentry),
  irEntry = FUNCTION_TO_IRFUNCTION(funcentry).

// Be loose in our demands for accepting a block as being in the same
// function.
Block_IRBlock(block, func, irblock),
IRInFunction(irblock, irFunc) :-
  MaybeInFunction(block, func),
  !BlockToClone(block, func),
  irblock = BLOCK_TO_IRBLOCK(block),
  Function_IRFunction(func, irFunc).

Block_IRBlock(block, func, irblock),
IRInFunction(irblock, irFunc) :-
  MaybeInFunction(block, func),
  BlockToClone(block, func),
  irblock = FRESH_IRBLOCK(block, func),
  Function_IRFunction(func, irFunc).

// Now let's settle the edges of the graph: which
// block is connected to which next one.

.decl IRFunction_Return_Edge(block: IRBlock, next: IRBlock)
.decl IRFunction_Return(fn: IRFunction, ret: IRBlock)
.decl IRFunctionCallReturn(caller: IRBlock, func: IRFunction, retcaller: IRBlock)

// Be strict in our precision demands for recognizing a call
IRFunction_Return(irfunc, retir),
IRFunctionCallReturn(callerir, irfunc, callerretir),
IRFunction_Return_Edge(retir, callerretir) :-
  IsFunctionCallReturn(caller, func, ret, callerret),
  Block_IRBlock(ret, func, retir),
  Block_IRBlock(caller, prevfunc, callerir),
  Block_IRBlock(callerret, prevfunc, callerretir),
  Function_IRFunction(func, irfunc),
  !BlockToClone(func, prevfunc).


// REVIEW: IRFunctionCall will include the IRFunctionCallReturn
// edges, i.e., the fully resolved calls, all the way to returns
// to the same caller function. Seems later stages can handle this?

.decl IRFunctionCall(from: IRBlock, func: IRFunction)
IRFunctionCall(fromir, irFunc) :-
  IsFunctionCall(from, func),
  Block_IRBlock(from, prevfunc, fromir),
  Function_IRFunction(func, irFunc),
  !BlockToClone(func, prevfunc).


// ///// This doesn't seem to be valid
// // Regular return instructions should also count as IR returns? For
// // use in possible #return values calculation.
// IRFunction_Return(irFunc, retBlock) :-
//   Statement_Opcode(stmt, "RETURN"),
//   Statement_IRStatement(stmt, func, irstmt),
//   IRBasicBlock_Tail(retBlock, irstmt),
//   Function_IRFunction(func, irFunc).


// Intra-function edges (i.e., real CFG edges)

//// WARNING: Be careful when using! This is an unintuitive
//// concept. It's only mapping the intra-procedural subset of
//// BlockEdges to the functional IR, not all BlockEdges. It's also
//// not the same as the "local" block edges of the functional IR,
//// because these also continue the function code after a call.
.decl IRBlockEdge(from: IRBlock, to: IRBlock)
IRBlockEdge(irfrom, irto) :-
  BlockEdge(_, from, _, to),
  Block_IRBlock(from, func, irfrom),
  Block_IRBlock(to, func, irto).

.decl LocalBlockEdge(block: IRBlock, next: IRBlock)
LocalBlockEdge(irfrom, irto) :-
  IRBlockEdge(irfrom, irto).
LocalBlockEdge(block, next) :-
  IRFunctionCallReturn(block, _, next).

.decl EnhancedLocalBlockEdge(from: IRBlock, to: IRBlock)
EnhancedLocalBlockEdge(from, to) :- LocalBlockEdge(from, to).

// Add "invalid" transitions to exit points, including returns, throws, and calls with no return
EnhancedLocalBlockEdge(from, "invalid") :- IRInFunction(from, _), !LocalBlockEdge(from, _).
EnhancedLocalBlockEdge(from, "invalid") :- IRFunction_Return(_, from).

//
// The next few are mostly direct translations of concepts from the
// standard TAC IR to the Functional IR.
//

.decl IRFallthroughEdge(from: IRBlock, to: IRBlock)
IRFallthroughEdge(irfrom, irto) :-
  FallthroughEdge(from, to),
  Block_IRBlock(from, func, irfrom),
  Block_IRBlock(to, func, irto).


.decl Statement_IRStatement(stmt: Statement, func: Block, irstmt: IRStatement)
.decl IRStatement_Block(stmt: IRStatement, to: IRBlock)

.decl IRStatement_VarString(irstmt: IRStatement, func: symbol)
.decl IRBlock_VarString(irblock: IRBlock, str: symbol)
IRStatement_VarString(irstmt, irFunc),
IRBlock_VarString(irblock, irFunc),
IRStatement_Block(irstmt, irblock),
Statement_IRStatement(stmt, func, irstmt) :-
  BlockToClone(block, func),
  Statement_Block(stmt, block),
  Block_IRBlock(block, func, irblock),
  Function_IRFunction(func, irFunc),
  irstmt = FRESH_IRSTATEMENT(stmt, func).

IRStatement_VarString(irstmt, ""),
IRBlock_VarString(irblock, ""),
IRStatement_Block(irstmt, irblock),
Statement_IRStatement(stmt, func, irstmt) :-
  Block_IRBlock(block, func, irblock),
  !BlockToClone(block, func),
  Statement_Block(stmt, block),
  irstmt = STATEMENT_TO_IRSTATEMENT(stmt).

.decl IRStatementNum(stmt: IRStatement, num: number)
IRStatementNum(irstmt, num) :-
  _StatementNum(stmt, num),
  Statement_IRStatement(stmt, _, irstmt).

.decl IRTACNOP(stmt: IRStatement)
IRTACNOP(irstmt) :-
  TACNOP(stmt),
  Statement_IRStatement(stmt, _, irstmt).

/***********
 * Identify actual function calls and returns
 ***********/

.decl FunctionCallStmt(irstmt: IRStatement)
FunctionCallStmt(irstmt) :-
  Block_IRBlock(block, func, irblock),
  IRFunctionCall(irblock, _),
  BasicBlock_Tail(block, stmt),
  Statement_IRStatement(stmt, func, irstmt).

.decl FunctionReturnStmt(irstmt: IRStatement)
FunctionReturnStmt(irstmt) :-
  Block_IRBlock(block, func, irblock),
  IRFunction_Return(_, irblock),
  BasicBlock_Tail(block, stmt),
  Statement_IRStatement(stmt, func, irstmt).

.decl IRStatement_Opcode(stmt: IRStatement, op: Opcode)
IRStatement_Opcode(irstmt, op) :-
  Statement_Opcode(stmt, op),
  Statement_IRStatement(stmt, _, irstmt),
  !FunctionCallStmt(irstmt),
  !FunctionReturnStmt(irstmt).

IRStatement_Opcode(irstmt, "CALLPRIVATEI") :-
  Statement_IRStatement(stmt, _, irstmt),
  JUMPI(stmt),
  FunctionCallStmt(irstmt).

IRStatement_Opcode(irstmt, "CALLPRIVATE") :-
  Statement_IRStatement(stmt, _, irstmt),
  !JUMPI(stmt),
  FunctionCallStmt(irstmt).

IRStatement_Opcode(irstmt, "RETURNPRIVATEI") :-
  Statement_IRStatement(stmt, _, irstmt),
  JUMPI(stmt),
  FunctionReturnStmt(irstmt).

IRStatement_Opcode(irstmt, "RETURNPRIVATE") :-
  Statement_IRStatement(stmt, _, irstmt),
  JUMP(stmt),
  FunctionReturnStmt(irstmt).

.decl IRIsJump(stmt: IRStatement)
IRIsJump(irstmt) :-
  IsJump(stmt),
  Statement_IRStatement(stmt, _, irstmt).
 
.decl IRBasicBlock_Tail(block: IRBlock, tail: IRStatement)
IRBasicBlock_Tail(irblock, irtail) :-
  BasicBlock_Tail(block, tail),
  Block_IRBlock(block, func, irblock),
  Statement_IRStatement(tail, func, irtail),
  IRStatement_Block(irtail, irblock).


// Also translating concepts of how a block uses the stack
.decl IRBlockPopDelta(from: IRBlock, n: StackIndex)
.decl IRBlockStackDelta(from: IRBlock, stackDelta: StackIndex)

IRBlockPopDelta(irblock, n) :-
  BlockPopDelta(block, n),
  Block_IRBlock(block, _, irblock).

IRBlockStackDelta(irblock, stackDelta) :-
  BlockStackDelta(block, stackDelta),
  Block_IRBlock(block, _, irblock).

.decl IRStatement_Uses_Local(stmt: IRStatement, varOrStackIndex: VariableOrStackIndex, n: StackIndex)
IRStatement_Uses_Local(irstmt, varOrStackIndex, n) :-
  Statement_Uses_Local(stmt, varOrStackIndex, n),
  Statement_IRStatement(stmt, _, irstmt).

.decl IRBeforeLocalStackContents(stmt: IRStatement, n:StackIndex, varOrStackIndex:VariableOrStackIndex)
IRBeforeLocalStackContents(irstmt, n, varOrStackIndex) :-
  BeforeLocalStackContents(stmt, n, varOrStackIndex),
  Statement_IRStatement(stmt, _, irstmt).

.decl IRLocalStackContents(stmt: IRStatement, n:StackIndex, varOrStackIndex:VariableOrStackIndex)
IRLocalStackContents(irstmt, n, varOrStackIndex) :-
  LocalStackContents(stmt, n, varOrStackIndex),
  Statement_IRStatement(stmt, _, irstmt).

.decl IRThrowJump(irstmt: IRStatement)
IRThrowJump(irstmt) :-
  ThrowJump(stmt),
  Statement_IRStatement(stmt, _, irstmt).

.decl IRBlock_Gas(irblock: IRBlock, gas: number)
IRBlock_Gas(irblock, gas) :-
  Block_IRBlock(block, _, irblock),
  Block_Gas(block, gas).


/***********
 * Discovery of arguments accepted by a function   
 ***********/

// New Instructions
// CALLPRIVATE(stmt, function)
// CALLPRIVATEI(stmt, cond, function)
// RETURNPRIVATE(stmt)
// RETURNPRIVATEI(stmt, cond)

.decl NumberOfFunctionArguments(func: IRFunction, num: StackIndex)
.decl NumberOfFunctionReturnArguments(func: IRFunction, num: StackIndex)

// In the functional IR we have more kinds of (local) edges than in the TAC IR:
//  - Call-return edges from a block that ends in a call to the purported
//    continuation of the call
//  - Call edges that don't return (shown as edges to "invalid")
//  - return edges (also to "invalid")
//  - throw/exit edges (also to "invalid")
// We need to extend the stack-manipulation predicates for all those. Care
// should be taken for conditional calls.

// How many (max) elements are popped from the stack during this block transition?
.decl EdgePopDelta(from: IRBlock, to: IRBlock, delta: StackIndex)

// The edge itself is not a call, nor return, nor throw. The final
// statement *may* be a conditional call or return, though.
EdgePopDelta(from, to, delta) :-
  IRBlockEdge(from, to),
  IRBlockPopDelta(from, delta).

// The edge (not just the statement, which may be a conditional) is a return or
// a throw. Not a non-returning call (which would also be an edge to "invalid").
EdgePopDelta(from, "invalid", delta) :-
  EnhancedLocalBlockEdge(from, "invalid"),
  !IRFunctionCall(from, _), 
  IRBlockPopDelta(from, delta).

// The edge is a call. Same handling for with and without return.
// Surprisingly, we can still compute the high watermark of how many
// stack slots will be consumed.

// The function needs n args, the caller block pops m and leaves the
// stack with d more than it found. This means n-d of the arguments
// are above the stack line the block got when it started.

// Case 1: If n-d >= m, then the combination block+call edge consumes
// (max) n-d stack elements, relative to the stack level at beginning
// of the caller block.
EdgePopDelta(from, to, newPopDelta) :-
  EnhancedLocalBlockEdge(from, to),
  IRFunctionCall(from, func),
  PossibleImpreciseNumberOfFunctionArguments(func, n_args),
  IRBlockPopDelta(from, popDelta),
  IRBlockStackDelta(from, stackDelta),
  newPopDelta = n_args-stackDelta,
  newPopDelta < MAX_STACK_HEIGHT,
  newPopDelta >= popDelta.

// Case 2: If n-d < m, then the combination block+call edge consumes m
// stack elements, relative to the stack level at beginning of the
// caller block.
EdgePopDelta(from, to, popDelta) :-
  EnhancedLocalBlockEdge(from, to),
  IRFunctionCall(from, func),
  PossibleImpreciseNumberOfFunctionArguments(func, n_args),
  IRBlockPopDelta(from, popDelta),
  IRBlockStackDelta(from, stackDelta),
  newPopDelta = n_args-stackDelta,
  newPopDelta < popDelta.


// What is the total difference in stack level during this block transition?
.decl EdgeStackDelta(from: IRBlock, to: IRBlock, delta: StackIndex)

// Not a call edge, nor return.
EdgeStackDelta(from, to, stackDelta) :-
  IRBlockEdge(from, to),
  IRBlockStackDelta(from, stackDelta).

// It's a return or throw edge
EdgeStackDelta(from, "invalid", delta) :-
  EnhancedLocalBlockEdge(from, "invalid"),
  !IRFunctionCall(from, _), 
  IRBlockStackDelta(from, delta).

// It's a call-with-return edge
EdgeStackDelta(from, to, newStackDelta) :-
  EnhancedLocalBlockEdge(from, to),
  IRFunctionCallReturn(from, func, to),
  IRFunction_Return(func, ret),
  PossibleCombinedNumberOfFunctionReturnsAndArguments(func, ret, n_args, n_ret),
  IRBlockStackDelta(from, stackDelta),
  newStackDelta = stackDelta-n_args+n_ret,
  newStackDelta < MAX_STACK_HEIGHT,
  newStackDelta > -MAX_STACK_HEIGHT.

// What about calls with no return? These don't get back to the
// caller, so we never care about the level they leave the stack at,
// only about how deep in it they went.


// What's the total pop and stack delta since the beginning of the
// function for (probably) cycle-free paths? Clearly these can have
// multiple values. We need to keep track of all nodes avoided in the
// path so far, so that we can extend the path cycle-free. We also
// need to ensure both cumulative deltas are true for the *same* path,
// not just different paths to the same end node. This makes for
// complex rules.
.decl PossibleFunctionEdgePopAndStackDeltaBypassing(func: IRFunction, to: IRBlock, bypass: IRBlock, popDelta: StackIndex, stackDelta: StackIndex)

// Another auxiliary for optimization: avoid join in key innermost loop
.decl EdgePopAndStackDelta(from: IRBlock, to:IRBlock, popDelta:StackIndex, stackDelta:StackIndex)
EdgePopAndStackDelta(from, to, popDelta, stackDelta) :-
  EdgePopDelta(from, to, popDelta),
  EdgeStackDelta(from, to, stackDelta).
 .plan 1:(2,1)

PossibleFunctionEdgePopAndStackDeltaBypassing(from, from, bypass, 0, 0) :-
  IRFunctionEntry(from),
  (IRInFunction(bypass, from);
   bypass = "invalid"),
  bypass != from.

// Here's the neat hack: there is no guarantee there is a path that
// skips both "to" and "bypass". But if we find one that skips
// "bypass" and another that skips "to" and they both have the same
// stack deltas, we pretend they are the same path.  Note also that
// this logic doesn't handle paths that include *all* of a function's
// basic blocks. There needs to always be one extra (bypassed) node
// for the rule to match and to extend the path by one more node.
PossibleFunctionEdgePopAndStackDeltaBypassing(func, to, bypass, correctPopDelta, newStackDelta) :-
  PossibleFunctionEdgePopAndStackDeltaBypassing(func, from, bypass, prevPopDelta, prevStackDelta),
  PossibleFunctionEdgePopAndStackDeltaBypassing(func, from, to, prevPopDelta, prevStackDelta),
  EdgePopAndStackDelta(from, to, popDelta, stackDelta),
  to != bypass,
  newPopDelta = popDelta - prevStackDelta,
  ((newPopDelta > prevPopDelta, correctPopDelta = newPopDelta);
   (newPopDelta <= prevPopDelta, correctPopDelta = prevPopDelta)),
  newPopDelta < MAX_STACK_HEIGHT,
  newStackDelta = stackDelta + prevStackDelta,
  newStackDelta < MAX_STACK_HEIGHT,
  newStackDelta > -MAX_STACK_HEIGHT.
 .plan 1:(2,1,3), 2:(3,2,1)

.output PossibleFunctionEdgePopAndStackDeltaBypassing

.decl PossibleFunctionEdgePopDelta(func: IRFunction, to: IRBlock, delta: StackIndex)
.decl PossibleFunctionEdgeStackDelta(func: IRFunction, to: IRBlock, delta: StackIndex)

PossibleFunctionEdgePopDelta(func, to, popDelta),
PossibleFunctionEdgeStackDelta(func, to, stackDelta) :-
  PossibleFunctionEdgePopAndStackDeltaBypassing(func, to, _, popDelta, stackDelta).


// Combine both relative to a single terminal point, for precision.
// We need to go one edge back to make sure it's a terminal point
// (return, call-with-no-return, or throw, possibly conditionally),
// then add the delta again. Tedious.
.decl PossibleCombinedNumberOfFunctionReturnsAndArguments(func: IRFunction, terminal: IRBlock, numArg: StackIndex, numRet: StackIndex)

PossibleCombinedNumberOfFunctionReturnsAndArguments(func, terminal, numArg, numRet) :-
  PossibleFunctionEdgePopAndStackDeltaBypassing(func, terminal, _, prevPopDelta, prevStackDelta),
  EdgePopAndStackDelta(terminal, "invalid", popDelta, stackDelta),
  newPopDelta = popDelta - prevStackDelta,
  newPopDelta < MAX_STACK_HEIGHT,
  ((newPopDelta > prevPopDelta, numArg = newPopDelta);
   (newPopDelta <= prevPopDelta, numArg = prevPopDelta)),
//  numRet = prevStackDelta + stackDelta.
  numRet = prevStackDelta + stackDelta + numArg.
    // When leaving the stack with d more items but it originally
    // contained a args, the total number of returned values is d+a.
 .plan 1:(2,1)


// Simple, imprecise over-estimate computation that doesn't incur
// cycle-through-aggregation problem, so it can be used in edge
// inferences.
.decl PossibleImpreciseNumberOfFunctionArguments(func: IRFunction, num: StackIndex)
PossibleImpreciseNumberOfFunctionArguments(func, numArg) :-
  PossibleCombinedNumberOfFunctionReturnsAndArguments(func, _, numArg, _).

.output PossibleImpreciseNumberOfFunctionArguments

// Our more precise inferences
.decl PossibleNumberOfFunctionArguments(func: IRFunction, num: StackIndex)
.decl PossibleNumberOfFunctionReturnArguments(func: IRFunction, num: StackIndex)

// Either a call with no return, or a return, or a throw: all are valid
PossibleNumberOfFunctionArguments(func, n) :-
  EnhancedLocalBlockEdge(block, "invalid"),
  IRInFunction(block, func),
  n = min numArg: PossibleCombinedNumberOfFunctionReturnsAndArguments(func, block, numArg, _).

/*
.decl FilteredPossibleNumberOfFunctionReturns(func: IRFunction, terminal: IRBlock, numRet: StackIndex)
FilteredPossibleNumberOfFunctionReturns(func, ret, correctNumRet) :-
   PossibleCombinedNumberOfFunctionReturnsAndArguments(func, ret, _, numRet),
   ((numRet >= 0, correctNumRet = numRet);
    (numRet < 0, correctNumRet = 0)).
*/

PossibleNumberOfFunctionReturnArguments(func, n) :-
  IRFunction_Return(func, ret),
  n = min numRet: PossibleCombinedNumberOfFunctionReturnsAndArguments(func, ret, _, numRet).
//  n = min numRet: FilteredPossibleNumberOfFunctionReturns(func, ret, numRet).

  
// REVIEW: do we need defaults of 0? I don't see why. But it won't hurt as
// long as we are taking the max.
PossibleNumberOfFunctionArguments(func, 0),
PossibleNumberOfFunctionReturnArguments(func, 0) :-
  IRFunctionEntry(func).

NumberOfFunctionArguments(FUNCTION_SELECTOR, 0).

NumberOfFunctionArguments(func, n) :-
  IRFunctionEntry(func),
  func != FUNCTION_SELECTOR,
  n = max m : PossibleNumberOfFunctionArguments(func, m).

NumberOfFunctionReturnArguments(func, n) :-
  IRFunctionEntry(func),
  n = max m : PossibleNumberOfFunctionReturnArguments(func, m).


/// DEBUG
.output EdgePopDelta
.output EdgeStackDelta
.output PossibleFunctionEdgePopDelta
.output PossibleFunctionEdgeStackDelta
.output PossibleNumberOfFunctionArguments
.output PossibleNumberOfFunctionReturnArguments
.output PossibleCombinedNumberOfFunctionReturnsAndArguments
.output NumberOfFunctionArguments
.output NumberOfFunctionReturnArguments




.decl Variable_String(var:Variable, var_rep:symbol)

.decl Variable_Stmt_String(var:Variable, stmt: IRStatement, var_rep:symbol) inline

Variable_Stmt_String(var, stmt, res) :-
   res = cat(_stmt_str, _var_str),
   IRStatement_VarString(stmt, _stmt_str),
   Variable_String(var, _var_str).
        
.decl Variable_Block_String(var:Variable, block: IRBlock, var_rep:symbol) inline

Variable_Block_String(var, block, res) :-
   res = cat(_block_str, _var_str),
   IRBlock_VarString(block, _block_str),
   Variable_String(var, _var_str).


.decl FunctionArgument(func: IRFunction, n: StackIndex, var: Variable)
.decl FunctionCallReturnArgument(func: IRBlock, n: StackIndex, var: Variable)

.decl FunctionalStatement_Uses_Local(stmt: IRStatement, var:VariableOrStackIndex, n:StackIndex)

.decl FunctionalStatement_Uses(stmt:IRStatement, var:Variable, n:StackIndex)
.decl FunctionalStatement_Defines(callStmt:IRStatement, newVar:Variable, n: number)


Variable_String(var, var_rep) :-
   Statement_Defines(var_rep, var).

Variable_String(var, cat("arg",n_str)),
FunctionArgument(func, n, var) :-
//// REVIEW
//  PossibleNumberOfFunctionArguments(func, n_args),
  NumberOfFunctionArguments(func, n_args),
  IsStackIndexLessThan(n, n_args),
  FRESH_VARIABLE(var, BLOCK_TO_IRBLOCK(func), n), // TODO: use entry?
  NumberToString(n, n_str).


Variable_String(newVar, cat(callStmt, cat("_", n_str))),
FunctionalStatement_Defines(callStmt, newVar, n),
FunctionCallReturnArgument(caller, n, newVar) :-
  IRFunctionCall(caller, func),
//// REVIEW
  NumberOfFunctionReturnArguments(func, n_arg),
  IsStackIndexLessThan(n, n_arg),
  IRBasicBlock_Tail(caller, callStmt),
  FRESH_VARIABLE(newVar, callStmt, n),
  NumberToString(n, n_str).

// Renaming variables in functions
// Involves Propagating variables, but doesn't require re-computing the CFG
.decl FunctionalBlockInputContents(block:IRBlock, index:number, var:Variable)
.decl FunctionalBlockOutputContents(block:IRBlock, next: IRBlock, index:number, var:Variable)

FunctionalBlockInputContents(entry, n, var) :-
   IRFunctionEntry(entry),
   IRInFunction(entry, func),
   FunctionArgument(func, n, var).

FunctionalBlockInputContents(next, index, variable) :-
  FunctionalBlockOutputContents(_, next, index, variable).

// IMPORTANT: Although this code is probably correct, representing values
// per edge is wasteful. Confirmed.
// Is the per-edge representation equivalent to jump-site sensitivity?

// 1) Normal block to block flow, i.e. no unconditional function calls from block to block
FunctionalBlockOutputContents(block, next, index, variable) :-
  BeforeFunctionCallFunctionalBlockOutputContents(block, index, variable),
  EnhancedLocalBlockEdge(block, next),
  IRBlockEdge(block, next).

// 2) Same, but for return blocks
FunctionalBlockOutputContents(block, next, index, variable) :-
   BeforeFunctionCallFunctionalBlockOutputContents(block, index, variable),
   EnhancedLocalBlockEdge(block, next),
   !IRFunctionCall(block, _).

// 3) First block calls a function, take return args from function call

FunctionalBlockOutputContents(caller, next, n, newVar) :-
   FunctionCallReturnArgument(caller, n, newVar),
   // Note, we can ignore the exact identity of the called function,
   // As fresh variables will be the same, we only care about the number of
   // return arguments. With more sophisticated analysis, this could change.
   IRFunctionCallReturn(caller, _, next).

// 4) First block calls a function, take any remaining variables that have
//    not been passed as arguments, and shift
FunctionalBlockOutputContents(caller, next, newIndex, variable) :-
   BeforeFunctionCallFunctionalBlockOutputContents(caller, index, variable),
   IRFunctionCallReturn(caller, func, next),
//   PossibleCombinedNumberOfFunctionReturnsAndArguments(func, n_in, n_out),
////REVIEW
   NumberOfFunctionReturnArguments(func, n_out),
   NumberOfFunctionArguments(func, n_in),
   index >= n_in,
   newIndex = index+n_out-n_in,
   newIndex >= 0,
   newIndex < MAX_STACK_HEIGHT.

.decl BeforeFunctionCallFunctionalBlockOutputContents(caller: IRBlock, index: StackIndex, variable: Variable)

// Copy the stack variables untouched by the callee basic block
BeforeFunctionCallFunctionalBlockOutputContents(callee, index+delta, variable) :-
  FunctionalBlockInputContents(callee, index, variable),
  index >= calleePopLen,
  index+delta <= MAX_STACK_HEIGHT,
  IRBlockPopDelta(callee, calleePopLen),
  IRBlockStackDelta(callee, delta).

// Handle the proper variables pushed by this basic block
BeforeFunctionCallFunctionalBlockOutputContents(block, index, var) :-
  IRInFunction(block, _),
  IRBasicBlock_Tail(block, stmt),
  IRLocalStackContents(stmt, index, var),
  CheckIsVariable(var).

// Handle the stackIndexes pushed by this basic block
BeforeFunctionCallFunctionalBlockOutputContents(block, index, realVariable) :-
  FunctionalBlockInputContents(block, stackIndex, realVariable),
  IRBasicBlock_Tail(block, stmt),
  IRLocalStackContents(stmt, index, stackIndex),
  CheckIsStackIndex(stackIndex).


// TODO, check case for function call
FunctionalStatement_Uses_Local(stmt, varOrStackIndex, n) :-
  IRFunctionCall(block, func),
  IRBasicBlock_Tail(block, stmt),
  IRStatement_Opcode(stmt, opcode),
  OpcodePopWords(opcode, m),
//// REVIEW
//  PossibleNumberOfFunctionArguments(func, n_in),
  NumberOfFunctionArguments(func, n_in),
  IsStackIndexLessThan(n, m+n_in),
  IRBeforeLocalStackContents(stmt, n, varOrStackIndex).

// TODO, check case for function return
FunctionalStatement_Uses_Local(stmt, varOrStackIndex, n) :-
//// REVIEW
  NumberOfFunctionReturnArguments(func, n_out),
  IRFunction_Return(func, retBlock),
  IRBasicBlock_Tail(retBlock, stmt),
  IRStatement_Opcode(stmt, opcode),
  OpcodePopWords(opcode, m),
  IsStackIndexLessThan(n, m+n_out),
  IRBeforeLocalStackContents(stmt, n, varOrStackIndex).

FunctionalStatement_Uses_Local(irstmt, varOrStackIndex, n) :-
   Statement_Uses_Local(stmt, varOrStackIndex, n),
   Statement_IRStatement(stmt, _, irstmt).

FunctionalStatement_Uses(irstmt, var, n) :-
   Statement_Uses_Local(stmt, var, n),
   CheckIsVariable(var),
   Statement_IRStatement(stmt, _, irstmt).

FunctionalStatement_Defines(irstmt, newVar, 0) :-
   Statement_Defines(stmt, newVar),
   Statement_IRStatement(stmt, _, irstmt).

// Case: variable originates elsewhere
FunctionalStatement_Uses(stmt, var, n) :-
   IRStatement_Uses_Local(stmt, stackIndex, n),
   CheckIsStackIndex(stackIndex),
   IRStatement_Block(stmt, block),
   FunctionalBlockInputContents(block, stackIndex, var).

.decl PublicFunctionSignature(hex_signature: Value, text_signature: symbol)
.input PublicFunctionSignature

.decl HighLevelFunctionName(func: IRFunction, name: symbol)

// Standardize public function signature length
.decl SighashIntermediate(sig: symbol, sigHash: symbol)

SighashIntermediate(sigIn, cat("0x0",substr(sigOut,2,8))) :-
   SighashIntermediate(sigIn, sigOut),
   strlen(sigOut) < 10.

SighashIntermediate(sig, sig) :-
   PublicFunction(_, sig).

.decl IRPublicFunction(irfunc: IRFunction, sigHash: Value)
IRPublicFunction(irfunc, sigHash) :-
  PublicFunction(func, sigHash),
  Function_IRFunction(func, irfunc).
  
.decl PublicFunction_HighLevel(func: IRFunction, sigHashOut: symbol)
PublicFunction_HighLevel(func, sigHashOut) :-
   IRPublicFunction(func, sigHash),
   SighashIntermediate(sigHash, sigHashOut),
   strlen(sigHashOut) = 10.
   
HighLevelFunctionName(func, name) :-
   PublicFunction_HighLevel(func, sigHash),
   PublicFunctionSignature(sigHash, name).

HighLevelFunctionName(func, name) :-
   PublicFunction_HighLevel(func, name),
   !PublicFunctionSignature(name, _).

HighLevelFunctionName(func, func) :-
   IRFunctionEntry(func),
   func != FUNCTION_SELECTOR,
   !IRPublicFunction(func, _).

HighLevelFunctionName(FUNCTION_SELECTOR, "__function_selector__").
