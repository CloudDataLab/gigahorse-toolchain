/*
 * Preprocessing of decompiler input, to yield convenient relations
 */

#include "decompiler_input_opcodes.dl"
#include "../clientlib/util.dl"

.type Opcode
.type Statement 
                                         
.comp StatementFactReader {                                         
  .decl PushValue(stmt:Statement, v:Value)
  .decl Statement_Opcode(statement: Statement, opcode: Opcode)
  .decl Statement_Next(statement: Statement, statementNext: Statement)

  .input PushValue(IO="file", filename="PushValue.facts")
  .input Statement_Opcode(IO="file", filename="Statement_Opcode.facts")
  .input Statement_Next(IO="file", filename="Statement_Next.facts")
  
}

.init factReader = StatementFactReader

// Many operations have identity elements, and some are used often.
// Recognize such arithmetic that is guaranteed to return one of its
// operands.
.decl OperationLeftIdentity(opcode:symbol, value:Value)
.decl OperationRightIdentity(opcode:symbol, value:Value)

// Similarly for operations on constant values that return known results,
// e.g., AND with zeros
.decl OperationIs(opcode:symbol, value1:Value, value2:Value)

OperationLeftIdentity("OR", "0x0").
OperationLeftIdentity("SHL", "0x0").
OperationLeftIdentity("SHR", "0x0").
OperationLeftIdentity("SAR", "0x0").
OperationLeftIdentity("XOR", "0x0").
OperationLeftIdentity("ADD", "0x0").
OperationLeftIdentity("MUL", "0x1").
// REVIEW: better treatment of masking
OperationLeftIdentity("AND", mask) :- Mask_Length(mask, length), length > 0. 

OperationRightIdentity("OR", "0x0").
OperationRightIdentity("XOR", "0x0").
OperationRightIdentity("ADD", "0x0").
OperationRightIdentity("SUB", "0x0").
OperationRightIdentity("MUL", "0x1").
OperationRightIdentity("DIV", "0x1").
OperationRightIdentity("SDIV", "0x1").
OperationRightIdentity("AND", mask) :- Mask_Length(mask, length), length > 0. 

// Masks with all 1s
.decl Mask_Length(mask: Value, bytes: number)
.decl PreMask_Length(mask: symbol, bytes: number)

Mask_Length(cat("0x", mask), bytes) :-
   PreMask_Length(mask, bytes).

PreMask_Length("1", 1).
PreMask_Length("3", 1).
PreMask_Length("7", 1).
PreMask_Length("f", 1).
PreMask_Length("1f", 1).
PreMask_Length("3f", 1).
PreMask_Length("7f", 1).
PreMask_Length("ff", 1).

PreMask_Length(cat("ff", mask), bytes+1) :-
  PreMask_Length(mask, bytes),
  bytes < 32.

OperationIs("AND", "0x0", "0x0").
OperationIs("MUL", "0x0", "0x0").

