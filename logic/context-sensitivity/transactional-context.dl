.type PrivateContext = [block: Block, rest: PrivateContext]

.type Context = [ publicFun:symbol, pri: PrivateContext ]

// find number of jumps to estimate best context depth
.decl MaxContextDepth(d: number)

#ifndef MAX_CONTEXT_DEPTH
  MaxContextDepth(4).
#else
  MaxContextDepth(MAX_CONTEXT_DEPTH).
#endif

.decl InitialPrivateContext(ctx : PrivateContext)
InitialPrivateContext(nil).

.decl IsPrivateContext(rest:PrivateContext)
IsPrivateContext(nil).

.decl DropLast(ctx : PrivateContext, newCtx : PrivateContext)
DropLast(ctx, nil) :-
  IsPrivateContext(ctx),
  ctx = [ block, nil ], block = block.

IsPrivateContext(newCtx),
PrivateContextDepth(newCtx, depth - 1),
DropLast(ctx, newCtx) :-
  IsPrivateContext(ctx),
  PrivateContextDepth(ctx, depth),
  ctx = [ block, rest ],
  DropLast(rest, newRest),
  newCtx = [ block, newRest ].
  .plan 1:(2,1,3), 2:(3,1,2)

.decl PrivateContextDepth(ctx : PrivateContext, depth : number)
PrivateContextDepth(init, 0) :-
  InitialPrivateContext(init).

PrivateContextDepth(ctx, depth + 1) :-
  IsPrivateContext(ctx), ctx = [ block, rest ],	block = block,
  PrivateContextDepth(rest, depth).
  .plan 1:(2,1)

.decl TruncateContext(ctx : PrivateContext, newCtx : PrivateContext)

TruncateContext(ctx, newCtx) :-
  PrivateContextDepth(ctx, maxDepth),
  MaxContextDepth(maxDepth),
  DropLast(ctx, newCtx).
  .plan 1:(3,1,2)

TruncateContext(ctx, ctx) :-
  PrivateContextDepth(ctx, depth),
  MaxContextDepth(maxDepth),
  depth < maxDepth.

.decl InitialContext(ctx : Context)

InitialContext(["0x0", initialPrivateContext]) :- InitialPrivateContext(initialPrivateContext).


// inverse-escape analysis
.decl Block_Uses_Local(block: Block, var: VariableOrStackIndex)

Block_Uses_Local(block, var) :-
  postTrans.Statement_Block(stmt, block),
  postTrans.Statement_Uses_Local(stmt, var, _).

// We're only interested in private functions
// No ambiguity for public functions
.decl PrivateFunctionCallOrReturn(caller: Block)

PrivateFunctionCallOrReturn(caller) :-
  StaticBlockJumpTarget(caller, _),
  postTrans.Statement_Block(stmt, caller),
  postTrans.Statement_Defines(stmt, var),
  postTrans.Variable_Value(var, val),
  postTrans.JUMPDEST(@cast_to_symbol(val)),
  !Block_Uses_Local(caller, var).

PrivateFunctionCallOrReturn(caller) :-
  postTrans.Statement_Block(stmt, caller),
  postTrans.JUMP(stmt),
  !postTrans.ImmediateBlockJumpTarget(caller, _).


Context_PublicFunction(ctx, pubFun):-
  ReachableContext(ctx, _),
  ctx = [pubFun, callCtx],
  callCtx = callCtx.
  
.decl StaticBlockJumpTarget(caller: Block, target: Value)

StaticBlockJumpTarget(caller, target) :-
  postTrans.ImmediateBlockJumpTarget(caller, targetVar),
  postTrans.Variable_Value(targetVar, target),
  postTrans.JUMPDEST(@cast_to_symbol(target)).

.decl MergeContext(ctx : Context, caller : Block, newContext : Context)


// Trivial control flow case
MergeContext(ctx, caller, ctx) :-
  ReachableContext(ctx, caller),
#ifndef NO_PUBLIC_CONTEXT
  !postTrans.PublicFunction(caller, _),
#endif
  !PrivateFunctionCallOrReturn(caller). // todo

// Complex control flow case
IsPrivateContext(newPrivateContext),
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),   ctx = [pub, pri],
  PrivateFunctionCallOrReturn(caller),
#ifndef NO_PUBLIC_CONTEXT
  !postTrans.PublicFunction(caller, _),
#endif
  TruncateContext(pri, cutDownPri),
  newPrivateContext = [caller, cutDownPri],
  newContext = [pub, newPrivateContext].
.plan 1:(3,2,1)


#ifndef NO_PUBLIC_CONTEXT
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller), 
  postTrans.PublicFunction(caller, sigHash),
  ctx = [pub, pri], pub = pub,
  newContext = [sigHash, pri].
#endif

