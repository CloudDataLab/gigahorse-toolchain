.type PrivateContext = [block1:Block, block2: Block]
.type Context = [ publicFun:symbol, pri: PrivateContext ]

// find number of jumps to estimate best context depth

.decl InitialContext(ctx : Context)
InitialContext(["0x0", ["0x0", "0x0"]]).

// inverse-escape analysis
.decl Block_Uses_Local(block: Block, var: Variable)

Block_Uses_Local(block, var) :-
  postTrans.Statement_Block(stmt, block),
  postTrans.Statement_Uses_Local(stmt, var, _).

// We're only interested in private functions
// No ambiguity for public functions
.decl PrivateFunctionCallOrReturn(caller: Block)

PrivateFunctionCallOrReturn(caller) :-
  StaticBlockJumpTarget(caller, _),
  postTrans.Statement_Block(stmt, caller),
  postTrans.Statement_Defines(stmt, var),
  postTrans.Variable_Value(var, val),
  postTrans.JUMPDEST(CAST_TO_SYMBOL(val)),
  !Block_Uses_Local(caller, var).

PrivateFunctionCallOrReturn(caller) :-
  postTrans.Statement_Block(stmt, caller),
  postTrans.JUMP(stmt),
  !postTrans.ImmediateBlockJumpTarget(caller, _).


Context_PublicFunction(ctx, pubFun):-
  ReachableContext(ctx, _),
  ctx = [pubFun, callCtx],
  callCtx = callCtx.
  
.decl StaticBlockJumpTarget(caller: Block, target: Value)

StaticBlockJumpTarget(caller, target) :-
  postTrans.ImmediateBlockJumpTarget(caller, targetVar),
  postTrans.Variable_Value(targetVar, target),
  postTrans.JUMPDEST(CAST_TO_SYMBOL(target)).

.decl MergeContext(ctx : Context, caller : Block, newContext : Context)


// Trivial control flow case
MergeContext(ctx, caller, ctx) :-
  ReachableContext(ctx, caller),
#ifndef NO_PRIVATE_CONTEXT
  !PrivateFunctionCallOrReturn(caller),
#endif
#ifndef NO_PUBLIC_CONTEXT
  !postTrans.PublicFunction(caller, _),
#endif
  True().  


#ifndef NO_PRIVATE_CONTEXT
// Complex control flow case, add
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  PrivateFunctionCallOrReturn(caller),
#ifndef NO_PUBLIC_CONTEXT
  !postTrans.PublicFunction(caller, _),
#endif
  ctx = [pub, [ctx1, ctx2]], ctx1 = ctx1, // suppress warning
  newContext = [pub, [ctx2, caller]].
#endif
 
#ifndef NO_PUBLIC_CONTEXT
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  postTrans.PublicFunction(caller, sigHash),
  ctx = [pub, pri], pub = pub, // suppress warning
  newContext = [sigHash, pri].
#endif

