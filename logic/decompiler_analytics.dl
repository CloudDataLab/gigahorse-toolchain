// Outputs for Analytics purposes go here
// Every relation needs to start with 'Analytics_'
// in order to be considered by our scripts

.decl Analytics_Functions(block: Block)
.output Analytics_Functions

Analytics_Functions(func) :-
   Function(func).

.decl Analytics_Jumps(block: Block)
.output Analytics_Jumps

Analytics_Jumps(block) :-
  BasicBlock_Tail(block, tail),
  ReachableContext(_, block),
  IsJump(tail).


.decl Analytics_Blocks(block: Block)
.output Analytics_Blocks

Analytics_Blocks(block) :-
  ReachableContext(_, block).

// Sanity checking and analytics

.decl ReachableStatement(stmt: Statement)

ReachableStatement(stmt) :-
   ReachableContext(_, block),
   Statement_Block(stmt, block).

.decl Analytics_UnknownOperand(stmt:Statement)
.output Analytics_UnknownOperand

//TODO: make this stronger
Analytics_UnknownOperand(stmt) :-
   ReachableStatement(stmt),
   TAC_Op(stmt, opcode),
   OpcodePopWords(opcode, words),
   IsStackIndexLessThan(n, words),
   !FunctionalStatement_Uses_Local(stmt, _, n).

.decl Analytics_MissingImplementation(stmt:Statement, opcode:Opcode)
.output Analytics_MissingImplementation

Analytics_MissingImplementation(stmt, opcode) :-
   ValidStatement(stmt),
   Statement_Opcode(stmt, opcode),
   OpcodePushWords(opcode, n), n>0,
   !LocalStackContents(stmt, 0, _),
   !OpcodePossiblyHalts(opcode).

// Except return statements
.decl Analytics_PolymorphicTarget(block: Block)
.output Analytics_PolymorphicTarget      

// Excludes function return blocks
Analytics_PolymorphicTarget(block) :-
  Analytics_Jumps(block),                                                          
  InsBlockJumpValidTarget(block, target1),
  InsBlockJumpValidTarget(block, target2),
  !Function_Return(_, block),
  target1 != target2.

.decl Analytics_MissingJumpTarget(block: Block)
.output Analytics_MissingJumpTarget      

Analytics_MissingJumpTarget(block) :-
  Analytics_Jumps(block),                                                          
  !InsBlockJumpValidTarget(block, _).

.decl Analytics_JumpToAnyDefinedInStatement(block: Block, stmt: Statement)
.output Analytics_JumpToAnyDefinedInStatement

Analytics_JumpToAnyDefinedInStatement(block, stmt) :-
  Analytics_Jumps(block),                                                          
  BlockJumpTarget(_, block, targetVar),
  Variable_Value(targetVar, target),
  (DynamicValue(target) ; AnyValue(target)),
  Statement_Defines(stmt, targetVar).

.decl Analytics_JumpToAny(block: Block)
.output Analytics_JumpToAny

Analytics_JumpToAny(block) :-
   Analytics_JumpToAnyDefinedInStatement(block, _).

.decl Analytics_JumpToAnyOnly(block: Block)
.output Analytics_JumpToAnyOnly

Analytics_JumpToAnyOnly(block) :-
  Analytics_JumpToAny(block),
  Analytics_MissingJumpTarget(block).

// Sanity checking for functions

.decl Analytics_InexactFunctionArguments(func: Block)
.decl Analytics_InexactFunctionReturnArguments(func: Block)

.output Analytics_InexactFunctionArguments
.output Analytics_InexactFunctionReturnArguments

Analytics_InexactFunctionArguments(func) :-
   NumberOfFunctionArguments(func, delta),
   NumberOfFunctionArguments(func, delta2),
   delta != delta2.

Analytics_InexactFunctionReturnArguments(func) :-
   NumberOfFunctionReturnArguments(func, delta),
   NumberOfFunctionReturnArguments(func, delta2),
   delta != delta2.

.decl Analytics_BlockInMultipleFunctions(func: Block)
.output Analytics_BlockInMultipleFunctions

Analytics_BlockInMultipleFunctions(func2),
Analytics_BlockInMultipleFunctions(func) :-
   InFunction(block, func),
   InFunction(block, func2),
   func != func2.

.decl Analytics_BlockInNoFunctions(block: Block)
.output Analytics_BlockInNoFunctions

Analytics_BlockInNoFunctions(block) :-
   Statement_Block(_, block),
   !InFunction(block, _).

.decl Analytics_FunctionCall(block: Block)
.output Analytics_FunctionCall

Analytics_FunctionCall(block) :-
   FunctionCall(block, _).

.decl Analytics_FunctionCallWithReturn(block: Block)
.output Analytics_FunctionCallWithReturn

Analytics_FunctionCallWithReturn(block) :-
   FunctionCallReturn(block, _, _).

.decl Analytics_PublicFunction(func: Block)
.output Analytics_PublicFunction

Analytics_PublicFunction(func) :-
   PublicFunctionEntry(func, _).

.decl Analytics_PublicFunctionNameResolved(func: Block)
.output Analytics_PublicFunctionNameResolved

Analytics_PublicFunctionNameResolved(func) :-
   PublicFunctionEntry(func, sigHash),
   PublicFunctionSignature(sigHash, _).

// Non-continuation address passed
.decl Analytics_NonContinuationReturn(callerBlock: Block, retBlock: Block, target: Block)
.output Analytics_NonContinuationReturn

Analytics_NonContinuationReturn(callerBlock, retBlock, target) :-
  BlockJumpValidTarget(_, retBlock, targetVariable, target),
  BasicBlock_Tail(callerBlock, callerStmt),
  callerBlock != retBlock,
  IsJump(callerStmt),
  Statement_Defines(otherCallerStatement, targetVariable),
  Statement_Block(otherCallerStatement, callerBlock),
  CastStatementToBlock(targetHead, target),
  !Statement_Next(callerStmt, targetHead).
