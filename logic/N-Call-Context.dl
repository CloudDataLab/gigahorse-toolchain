.type PrivateContext = [block1:Block, block2: Block]
.type Context = [ publicFun:symbol, pri: PrivateContext ]

// find number of jumps to estimate best context depth

.decl NumberOfJumps(n: number)

NumberOfJumps(n1 + n2) :-
   n1 = count : JUMP(_),
   n2 = count : JUMPI(_).

#define ESTIMATE_DEPTH(n) (100000 / (n) / (n))

.decl MaxContextDepth(d: number)
MaxContextDepth(2).

/*
MaxContextDepth(m) :-
   NumberOfJumps(n),
   m = ESTIMATE_DEPTH(n),
   m >= 1, m <= 5.

MaxContextDepth(1) :-
   NumberOfJumps(n),
   m = ESTIMATE_DEPTH(n),
   m < 1.

MaxContextDepth(5) :-
   NumberOfJumps(n),
   m = ESTIMATE_DEPTH(n),
   m > 5.
*/
.output MaxContextDepth

.decl InitialContext(ctx : Context)
InitialContext(["0x0", ["0x0", "0x0"]]).

// We're only interested in private functions
// No ambiguity for public functions
.decl PrivateFunctionCaller(caller: Block)

PrivateFunctionCaller(caller) :-
  StaticBlockJumpTarget(caller, target),
  StaticBlockJumpTarget(caller2, target),
  caller != caller2.

PrivateFunctionCaller(caller) :-
  Statement_Block(_, caller),
  !BlockHasTrivialControl(caller).

/*
PrivateFunctionCaller(caller) :-
  PushValue(stmt, target),
  JUMPDEST(CAST_TO_SYMBOL(target)),
  Statement_Block(stmt, caller),
  !StaticBlockJumpTarget(caller, target).

*/
.decl StaticBlockJumpTarget(caller: Block, target: Value)

StaticBlockJumpTarget(caller, target) :-
  ImmediateBlockJumpTarget(caller, targetVar),
  Variable_Value(targetVar, target),
  JUMPDEST(CAST_TO_SYMBOL(target)).

.decl MergeContext(ctx : Context, caller : Block, newContext : Context)

// Trivial control flow case
MergeContext(ctx, caller, ctx) :-
  ReachableContext(ctx, caller),
  !PublicFunctionStart(caller, _),  
  !PrivateFunctionCaller(caller).

// Complex control flow case, add
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  PrivateFunctionCaller(caller),
  !PublicFunctionStart(caller, _),
  ctx = [pub, [ctx1, ctx2]], ctx1 = ctx1, // suppress warning
  newContext = [pub, [ctx2, caller]].

MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  PublicFunctionStart(caller, sigHash),
  ctx = [pub, pri], pub = pub, // suppress warning
  newContext = [sigHash, pri].


.decl BlockHasTrivialControl(block: Block)

BlockHasTrivialControl(block) :-
  BasicBlock_Tail(block, stmt),
  !IsJump(stmt).
  
BlockHasTrivialControl(block) :-
   ImmediateBlockJumpTarget(block, _).
