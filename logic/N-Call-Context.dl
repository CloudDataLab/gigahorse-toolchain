.type PrivateContext = [block1:Block, block2: Block]
.type Context = [ publicFun:symbol, pri: PrivateContext ]

// find number of jumps to estimate best context depth

.decl InitialContext(ctx : Context)
InitialContext(["0x0", ["0x0", "0x0"]]).


.decl BlockHasTrivialControl(block: Block)

BlockHasTrivialControl(block) :-
  postTrans.BasicBlock_Tail(block, stmt),
  !postTrans.IsJump(stmt).
  
BlockHasTrivialControl(block) :-
   postTrans.ImmediateBlockJumpTarget(block, _).


// We're only interested in private functions
// No ambiguity for public functions
.decl PrivateFunctionCaller(caller: Block)

PrivateFunctionCaller(caller) :-
  StaticBlockJumpTarget(caller, target),
  StaticBlockJumpTarget(caller2, target),
  caller != caller2.

PrivateFunctionCaller(caller) :-
  postTrans.Statement_Block(_, caller),
  !BlockHasTrivialControl(caller).


Context_PublicFunction(ctx, pubFun):-
  ReachableContext(ctx, _),
  ctx = [pubFun, callCtx],
  callCtx = callCtx.
  
.decl StaticBlockJumpTarget(caller: Block, target: Value)

StaticBlockJumpTarget(caller, target) :-
  postTrans.ImmediateBlockJumpTarget(caller, targetVar),
  postTrans.Variable_Value(targetVar, target),
  postTrans.JUMPDEST(CAST_TO_SYMBOL(target)).

.decl MergeContext(ctx : Context, caller : Block, newContext : Context)

// Trivial control flow case
MergeContext(ctx, caller, ctx) :-
  ReachableContext(ctx, caller),
  ctx = [pub, [ctx1, ctx2]], pub = pub, ctx2 = ctx2,
  ctx1 != "0x0",
  !postTrans.PublicFunction(caller, _),  
  !PrivateFunctionCaller(caller).

// Complex control flow case, add
MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  (PrivateFunctionCaller(caller);
   ctx1 = "0x0"),
  !postTrans.PublicFunction(caller, _),
  ctx = [pub, [ctx1, ctx2]], ctx1 = ctx1, // suppress warning
  newContext = [pub, [ctx2, caller]].

MergeContext(ctx, caller, newContext) :-
  ReachableContext(ctx, caller),
  postTrans.PublicFunction(caller, sigHash),
  ctx = [pub, pri], pub = pub, // suppress warning
  newContext = [sigHash, pri].


