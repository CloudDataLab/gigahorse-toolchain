// VERY IMPORTANT: IF YOU CHANGE ANY OUTPUT RELATION IN THIS FILE,
// PLEASE ALSO CHANGE clientlib/decompiler_imports.dl

// All sorts of different outputs of the decompiler, including
// three-address code representation (which is later input and
// re-formatted for use by clients), statistics, debugging relations.


// useful intermediate outputs
.output OpcodePossiblyHalts
.output IRBlockEdge
.output IRPublicFunction(IO="file", filename = "PublicFunction.csv", delimiter = "\t")
.output Statement_IRStatement
.output IRBlock_Gas

.decl Exit(block:IRBlock)

Exit(block) :- IRStatement_Block(_, block), !IRBlockEdge(block, _).

.decl FunctionalBlock_Uses_Local(block: IRBlock, stackIndex: StackIndex)

FunctionalBlock_Uses_Local(block, stackIndex) :-
  IRStatement_Block(stmt, block),
  FunctionalStatement_Uses_Local(stmt, stackIndex, _),
  IsStackIndex(stackIndex).

.decl PolymorphicStackIndex(block: IRBlock, stackIndex: StackIndex)

PolymorphicStackIndex(block, stackIndex) :-
  FunctionalBlock_Uses_Local(block, stackIndex),
  FunctionalBlockInputContents(block, stackIndex, var1),
  FunctionalBlockInputContents(block, stackIndex, var2),
  var1 != var2.

.decl PHILocation(block: IRBlock, stackIndex: StackIndex, newVarSymbol: symbol)

// Find all polymorphic stackIndexes
// These need phi instructions introduced at the dominance frontier
.output PHILocation
PHILocation(block, stackIndex, cat(cat(block, "_"), stackIndexHex)) :-
   PolymorphicStackIndex(block, stackIndex),
   stackIndexHex = @number_to_hex(stackIndex).

.symbol_type TACVariable

// Final decompiler outputs
.decl TAC_Op(stmt:IRStatement, op:Opcode)
.output TAC_Op
.decl TAC_Stmt(stmt:IRStatement)
.output TAC_Stmt
.decl PRE_TAC_Use(stmt: IRStatement, var: TACVariable, i: number)
.decl TAC_Use(stmt: IRStatement, var: TACVariable, i: number)
.output TAC_Use
.decl TAC_Def(stmt: IRStatement, var: TACVariable, n: number)
.output TAC_Def
.decl TAC_Var(var: TACVariable)
.output TAC_Var
.decl TAC_Block(stmt: IRStatement, block: IRBlock)
.output TAC_Block
.decl TAC_Block_Head(block: IRBlock, stmt: IRStatement)
.output TAC_Block_Head
.decl TAC_Variable_Value(var: TACVariable, value: symbol)
.output TAC_Variable_Value
.decl TAC_Variable_BlockValue(var: TACVariable, value: symbol)
.output TAC_Variable_BlockValue

/// Heuristically change the values of all constants that match cloned
/// basic block labels! Don't up

TAC_Variable_BlockValue(tacvar, irvalue) :-
  FunctionalStatement_Defines(stmt, var, _),
  Variable_Stmt_String(var, stmt, tacvar),
  postTrans.Variable_Value(var, value),
  StatementAndBlockInSameFunction(stmt, CAST_TO_SYMBOL(value), irvalue),
   // value matches address of block
   STARTSWITH(value, "0x").

.decl StatementAndBlockInSameFunction(stmt: IRStatement, block: Block, irblock: IRBlock)
StatementAndBlockInSameFunction(stmt, block, irblock) :-
  Statement_IRStatement(_, func, stmt),
  Block_IRBlock(block, func, irblock).


// Normal variable
TAC_Variable_Value(tacvar, value) :-
   FunctionalStatement_Defines(stmt, var, _),
   Variable_Stmt_String(var, stmt, tacvar),
   postTrans.Variable_Value(var, value),
   STARTSWITH(value, "0x").

// New Instructions
// *returnArgs = CALLPRIVATE(stmt, function, *args)
// RETURNPRIVATE(stmt, *args)

// Non-nop instructions
TAC_Stmt(irstmt) :-
  Statement_IRStatement(stmt, _, irstmt),
  postTrans.ValidStatement(stmt),
  !DeadStmt(irstmt),
  !IRTACNOP(stmt).

TAC_Op(irstmt, op) :-
   IRStatement_Opcode(irstmt, op),
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.ValidStatement(stmt),
   !DeadStmt(irstmt),
   !IRTACNOP(irstmt),
   !postTrans.ThrowJump(stmt),
   !postTrans.PushValue(stmt, _),
   !postTrans.PC(stmt),
   !postTrans.INVALID(stmt).

TAC_Op(irstmt, "CONST") :-
   Statement_IRStatement(stmt, _, irstmt),
   (postTrans.PushValue(stmt, _) ; postTrans.PC(stmt)).

TAC_Op(irstmt, "THROW") :-
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.JUMP(stmt),
   postTrans.ThrowJump(stmt).

TAC_Op(irstmt, "THROW") :-
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.INVALID(stmt).

TAC_Op(irstmt, "THROWI") :-
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.JUMPI(stmt),
   postTrans.ThrowJump(stmt).

// Phi instructions
TAC_Var(CAST_TO_SYMBOL(stmt)),
TAC_Def(stmt, CAST_TO_SYMBOL(stmt), 0),
TAC_Stmt(stmt),
TAC_Op(stmt, "PHI") :-
  PHILocation(_, _, stmt).

// Non-phi, non-call variable id same as stmt it is defined in
TAC_Var(var_rep),
TAC_Def(stmt, var_rep, n) :-
   FunctionalStatement_Defines(stmt, var, n),
   Variable_Stmt_String(var, stmt, var_rep).

// Case 1: Uses locally defined variable
PRE_TAC_Use(stmt, var_rep, n) :-
  FunctionalStatement_Uses_Local(stmt, var, n),
  CheckIsVariable(var),
  Variable_Stmt_String(var, stmt, var_rep).

// Case 2: Uses monomorphic global var
// Using the block in which the var is defined,
// Fixes cases where a stmt in a cloned block is using
// a variable defined in a non cloned block
PRE_TAC_Use(stmt, var_rep, n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  IRInFunction(block, fun),
  !PHILocation(block, stackIndex, _),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionalStatement_Defines(defstmt, var, _),
  IRStatement_Block(defstmt, defBlock),
  IRInFunction(defBlock, fun),
  Variable_Block_String(var, defBlock, var_rep).

//Case 2.1: Uses arg(like the above case, but not defined)
PRE_TAC_Use(stmt, var_rep, n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  !PHILocation(block, stackIndex, _),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionArgument(_, _, var),
  Variable_String(var, var_rep).


// Case 3: Is a PHI statement
PRE_TAC_Use(phiStmt, var_rep, -1) :-
  PHILocation(block, stackIndex, phiStmt),
  FunctionalBlockInputContents(block, stackIndex, var),
  IRInFunction(block, fun),
  FunctionalStatement_Defines(defstmt, var, _),
  IRStatement_Block(defstmt, defBlock),
  IRInFunction(defBlock, fun),
  Variable_Block_String(var, defBlock, var_rep).

// Case 3.1: Phis using args
PRE_TAC_Use(phiStmt, var_rep, -1) :-
  PHILocation(block, stackIndex, phiStmt),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionArgument(_, _, var),
  Variable_String(var, var_rep).


TAC_Use(stmt, var_rep, n) :-
   !IRThrowJump(stmt),
   PRE_TAC_Use(stmt, var_rep, n).

TAC_Use(irstmt, var_rep, n-1) :-
   IRThrowJump(irstmt),
   PRE_TAC_Use(irstmt, var_rep, n),
   n > 0.


// Case 4: Uses polymorphic variable
PRE_TAC_Use(stmt, var_rep, n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  PHILocation(block, stackIndex, var_rep).

TAC_Block(stmt, block) :-
  IRStatement_Block(stmt, block),
  !DeadBlock(block),
  !IRTACNOP(stmt).

TAC_Block(phiStmt, block) :-
  PHILocation(block, _, phiStmt),
  !DeadBlock(block).


// Fresh call statements
//TAC_Block(callStmt, block) :-
//   BasicBlock_CALL(block, callStmt).


/***********
 *  Function-discovery outputs to visualization scripts
 ***********/

.output IRFunctionCall
.output IRFunctionCallReturn
.output IRFunction_Return
.output IsFunctionEntry(IO="file", filename="Function.csv", delimiter="\t")

.decl FormalArgs(func:IRFunction, var:symbol, n:number)
.output FormalArgs

FormalArgs(func, var_rep, n) :-
   FunctionArgument(func, n, var),
   Variable_String(var, var_rep).

.decl ActualReturnArgs(caller:IRBlock, var_rep:symbol, n:number)
.output ActualReturnArgs

ActualReturnArgs(caller, var_rep, n) :-
   FunctionCallReturnArgument(caller, n, var),
   Variable_Block_String(var, caller, var_rep).

.output LocalBlockEdge
.output HighLevelFunctionName
.output IRFallthroughEdge

.output Mask_Length
.output IRInFunction(IO="file", filename="InFunction.csv", delimiter="\t")
.output IRFunctionEntry

/*****
 *  Statement Ordering
 *****/
.decl PRE_TAC_Statement_Next(stmt: Statement, next: Statement)

PRE_TAC_Statement_Next(stmt, next) :-
   postTrans.Statement_Next(stmt, next).

PRE_TAC_Statement_Next(stmt, nextnext) :-
  PRE_TAC_Statement_Next(stmt, next),
  PRE_TAC_Statement_Next(next, nextnext),
  postTrans.TACNOP(next).


/// WARNING: This only works intra-procedurally after the Functional IR conversion.
.decl TAC_Statement_Next(stmt: IRStatement, next: IRStatement)
.output TAC_Statement_Next

TAC_Statement_Next(irstmt, irnext) :-
   PRE_TAC_Statement_Next(stmt, next),
   Statement_IRStatement(stmt, func, irstmt),
   Statement_IRStatement(next, func, irnext),
   TAC_Block(irstmt, _), TAC_Block(irnext, _).

// TODO for statement ordering
// a) phi functions
// b) fresh call statements (if reintroduced)

TAC_Block_Head(block, irstmt) :-
   TAC_Block(irstmt, block),
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.IsBasicBlockHead(stmt).


/******
 * Event signatures
 *****/

.decl EventSignature(hex_signature: Value, text_signature: symbol)
.input EventSignature

.decl EventSignatureInContract(hex_signature: Value, text_signature: symbol)
.output EventSignatureInContract

.decl LOGStmt_SigHash(log:IRStatement, sigHash:symbol)
//.output LOGStmt_SigHash

LOGStmt_SigHash(stmt, sigHash):-
  (TAC_Op(stmt, "LOG0");
  TAC_Op(stmt, "LOG1");
  TAC_Op(stmt, "LOG2");
  TAC_Op(stmt, "LOG3");
  TAC_Op(stmt, "LOG4")),
  TAC_Use(stmt, logSigHashVar, 2),
  TAC_Variable_Value(logSigHashVar, sigHash).

EventSignatureInContract(sigHash, sigText):-
  LOGStmt_SigHash(_, sigHash),
  EventSignature(sigHash, sigText).

.decl ConstantPossibleSigHash(constSigHash:symbol, name:symbol)
.output ConstantPossibleSigHash

ConstantPossibleSigHash(sigHashBigVal, name):-
  TAC_Variable_Value(_, sigHashBigVal),
  sigHash = substr(sigHashBigVal, 0 , 10),
  PublicFunctionSignature(sigHash, name).