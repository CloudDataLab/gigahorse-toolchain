#define MAX_INSERTS 5

#define COPY_CODE(from, to)\
to##Statement_Next(stmt, next) :- from##Statement_Next(stmt, next).\
to##Statement_Opcode(stmt, op) :- from##Statement_Opcode(stmt, op).\
to##PushValue(stmt, value) :- from##PushValue(stmt, value)
 
.comp StatementInsertor {
   // Inputs
  .decl In_Statement_Next(stmt: Statement, next: Statement)
  .decl In_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl In_PushValue(stmt: Statement, value: Value)

  // Insertions
  .decl insertOp(stmt: Statement, op: Opcode, value: Value, order: number)
  .decl insertPushLabel(stmt: Statement, order: number, stmtTo: Statement, orderTo: number)
  
  // Modifications
  .decl changeOp(stmt: Statement, op: Opcode)
  
  // Outputs
  .decl Out_Statement_Next(stmt: Statement, next: Statement)
  .decl Out_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl Out_PushValue(stmt: Statement, value: Value)

  .decl PreInsertedOpNewStatementNum(stmt: Statement, order: number, newStmt: number)
  
  PreInsertedOpNewStatementNum(stmt, order, @hex_to_number(stmt) * MAX_INSERTS + order) :-
    (insertOp(stmt, _, _, order) ; insertPushLabel(stmt, order, _, _)).

  .decl PreInsertedOpMissingStmt(n : number)

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpNewStatementNum(_, _, newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpMissingStmt(newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

   .decl MaxStmt(n: number)
   MaxStmt(n) :-
      n = max @hex_to_number(stmt) : In_Statement_Opcode(stmt, _).

  .decl InsertedOpNewStatement(stmt: Statement, order: number, newStmt: Statement)

  InsertedOpNewStatement(stmt, order, @number_to_hex(newStmt - n + maxStmt + 1)) :-
    PreInsertedOpNewStatementNum(stmt, order, newStmt),
    MaxStmt(maxStmt),
    n = count : { PreInsertedOpMissingStmt(smallerThanNewStmt), smallerThanNewStmt < newStmt }.

  Out_Statement_Opcode(stmt, op) :-
    In_Statement_Opcode(stmt, op),
    !changeOp(stmt, _).

  Out_Statement_Opcode(stmt, op) :-
    changeOp(stmt, op).

  Out_Statement_Opcode(newStmt, op) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, _, order).

  Out_Statement_Opcode(newStmt, "PUSH4") :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertPushLabel(stmt, order, _, _).

  Out_PushValue(stmt, value) :-
    Out_Statement_Opcode(stmt, op),
    In_PushValue(stmt, value),
    OpcodeIsPush(op).

  Out_PushValue(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    OpcodeIsPush(op).

  Out_PushValue(stmt, CAST_TO_SYMBOL(label)) :-
    insertPushLabel(stmt, order, stmtTo, orderTo),
    InsertedOpNewStatement(stmtTo, orderTo, label),
    InsertedOpNewStatement(stmt, order, newstmt).

  Out_Statement_Next(stmt, next) :-
   In_Statement_Next(stmt, next),
   !insertOp(next, _, _, _),
   !insertPushLabel(next, _, _, _).

  Out_Statement_Next(stmt, next) :-
   In_Statement_Next(stmt, post),
   InsertedOpNewStatement(post, 0, next).

  Out_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(post, i, stmt),
   InsertedOpNewStatement(post, i+1, next).

  Out_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(next, i, stmt),
   !InsertedOpNewStatement(next, i+1, _).

}



// 0x9  ISZERO
// 0x10 PUSH4 <pub_entry>
// 0x11 JUMPI
// BECOMES
// 0x9 ISZERO
// 0x? JUMPI // TODO!
// 0x? JUMPDEST
// 0x10 PUSH4 <pub_entry>
// 0x11 JUMP


.init insertor = StatementInsertor
COPY_CODE(, insertor.In_).
insertor.insertPushLabel("0x10", 0, "0x10", 2).
insertor.insertOp("0x10", "JUMPI", "", 1). 
insertor.insertOp("0x10", "JUMPDEST", "", 2).
insertor.changeOp("0x10", "JUMP").

.output insertor.Out_Statement_Opcode