#define MAX_INSERTS 5

#define INITIALIZE_STATEMENT_INSERTOR(_insertor, from)\
.init _insertor = StatementInsertor \
_insertor.In_Statement_Next(stmt, next) :- from##Statement_Next(stmt, next).\
_insertor.In_Statement_Opcode(stmt, op) :- from##Statement_Opcode(stmt, op).\
_insertor.In_PushValue(stmt, value) :- from##PushValue(stmt, value).

#define ISLABEL(value) (substr(value, 0, 9) = "JUMPDEST:")
#define MAKE_LABEL_REFERENCE(value) cat("JUMPDEST:", value)
#define MAKE_LABEL CAST_TO_SYMBOL
#define GETLABEL(value) substr(value, 9, 8)

.comp StatementInsertor {
   // Inputs
  .decl In_Statement_Next(stmt: Statement, next: Statement)
  .decl In_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl In_PushValue(stmt: Statement, value: Value)

  .type Insertion = [ op: Opcode, value: Value ]
  .type Insertions = [ insertion:Insertion, rest:Insertions ]

  // Insertions
  .decl insertOps(stmt: Statement, insertions: Insertions)
  
  // Modifications
  .decl changeOp(stmt: Statement, op: Opcode)
  changeOp(stmt, op) :- changeOp(stmt, op). // suppress warning

  // Removal
  .decl removeOp(stmt: Statement)
  removeOp(stmt) :- removeOp(stmt). // suppress warning

  // Outputs
  .decl Out_Statement_Next(stmt: Statement, next: Statement)
  .decl Out_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl Out_PushValue(stmt: Statement, value: Value)

  // Simple translation
  .decl insertOp(stmt: Statement, op: Opcode, value: Value, order: number)

  .decl insertOpsN(stmt: Statement, insertions: Insertions, n: number)
  insertOpsN(stmt, insertions, 0) :-
   insertOps(stmt, insertions).

  insertOp(stmt, op, value, n),
  insertOpsN(stmt, rest, n+1) :-
   insertOpsN(stmt, [[op, value], rest], n).


  .decl PreInsertedOpNewStatementNum(stmt: Statement, order: number, newStmt: number)
  
  PreInsertedOpNewStatementNum(stmt, order, @hex_to_number(stmt) * MAX_INSERTS + order) :-
    insertOp(stmt, _, _, order).

  .decl PreInsertedOpMissingStmt(n : number)

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpNewStatementNum(_, _, newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpMissingStmt(newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

   .decl MaxStmt(n: number)
   MaxStmt(n) :- n = max @hex_to_number(stmt) : In_Statement_Opcode(stmt, _).

  .decl InsertedOpNewStatement(stmt: Statement, order: number, newStmt: Statement)

  .decl WastedSlots(newStmt: number, n: number)
  
  WastedSlots(newStmt, n) :-
     PreInsertedOpNewStatementNum(_, _, newStmt),
     n = count : { PreInsertedOpMissingStmt(smallerThanNewStmt), smallerThanNewStmt < newStmt }. 

  InsertedOpNewStatement(stmt, order, @number_to_hex(newStmt - n + maxStmt + 1)) :-
    PreInsertedOpNewStatementNum(stmt, order, newStmt),
    MaxStmt(maxStmt),
    WastedSlots(newStmt, n).

  Out_Statement_Opcode(stmt, op) :-
    In_Statement_Opcode(stmt, op),
    !changeOp(stmt, _),
    !removeOp(stmt).

  Out_Statement_Opcode(stmt, op) :-
    changeOp(stmt, op),
    !removeOp(stmt).

  Out_Statement_Opcode(newStmt, op) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, _, order).

  Out_PushValue(stmt, value) :-
    Out_Statement_Opcode(stmt, op),
    In_PushValue(stmt, value),
    OpcodeIsPush(op),
    !removeOp(stmt).

  Out_PushValue(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    !ISLABEL(value),
    OpcodeIsPush(op).

  Out_PushValue(newStmt, CAST_TO_SYMBOL(actualLabel)) :-
    insertOp(stmt, op, label, order),
    OpcodeIsPush(op),
    ISLABEL(label),
    insertOp(stmtTo, "JUMPDEST", GETLABEL(label), orderTo),
    InsertedOpNewStatement(stmtTo, orderTo, actualLabel),
    InsertedOpNewStatement(stmt, order, newStmt).

  .decl PreOut_Statement_Next(stmt: Statement, next: Statement)
  
  PreOut_Statement_Next(stmt, next) :-
   In_Statement_Next(stmt, next),
   !insertOp(next, _, _, _).

  PreOut_Statement_Next(stmt, next) :-
   In_Statement_Next(stmt, post),
   InsertedOpNewStatement(post, 0, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(post, i, stmt),
   InsertedOpNewStatement(post, i+1, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(next, i, stmt),
   !InsertedOpNewStatement(next, i+1, _).

  Out_Statement_Next(stmt, next) :-
    PreOut_Statement_Next(stmt, next),
    !removeOp(stmt), !removeOp(next).

  // TODO rest of the cases for removeOp
}


// 0x9  ISZERO
// 0x10 PUSH4 <pub_entry>
// 0x11 JUMPI
// BECOMES
// 0x9 ISZERO
// 0x? JUMPI // TODO!
// 0x? JUMPDEST
// 0x10 PUSH4 <pub_entry>
// 0x11 JUMP


INITIALIZE_STATEMENT_INSERTOR(insertor, )


insertor.removeOp(jumpStmt),
insertor.removeOp(pushStmt),
insertor.insertOps(pushStmt,
                   [["PUSH4", MAKE_LABEL_REFERENCE(jumpDestStmt)],
                   [["JUMPI", ""],
                    nil]]), 
insertor.insertOps(CAST_TO_SYMBOL(jumpDestStmt), 
                   [["JUMPDEST", MAKE_LABEL(jumpDestStmt)],
                   [["PUSH4", MAKE_LABEL(jumpDestStmt)],
                   [["JUMP", ""],
                    nil]]]) :-
   PublicFunctionJump(block, hash),
   PublicFunctionStart(jumpDestStmt, hash),
   PushValue(pushStmt, CAST_TO_SYMBOL(jumpDestStmt)),
   Statement_Block(pushStmt, block),
   BasicBlock_Tail(block, jumpStmt).
                                       
.output insertor.Out_Statement_Opcode
.output insertor.Out_Statement_Next
.output insertor.Out_PushValue
