// The parts of the schema of the decompiler output that need to be
// imported in order to import the full three-address code
// intermediate representation. All the information is there, but this
// code, together with tac_instructions.dl, creates a different
// intermediate representation (often reusing instruction names).

.type Variable
.type Statement
.type Block
.type Function
.type Opcode
.type Value

#include "tac_instructions.dl"

.decl OpcodePossiblyHalts(op: Opcode)
.input OpcodePossiblyHalts(IO="file", filename="OpcodePossiblyHalts.csv", delimiter="\t")

// Final decompiler outputs, code
.decl Statement_Opcode(stmt:Statement, op:Opcode)
.input Statement_Opcode(IO="file", filename="TAC_Op.csv", delimiter="\t")
.decl IsStatement(stmt:Statement)
.input IsStatement(IO="file", filename="TAC_Stmt.csv", delimiter="\t")
.decl IsVariable(var: Variable)
.input IsVariable(IO="file", filename="TAC_Var.csv", delimiter="\t")
.decl Statement_Block(stmt: Statement, block: Block)
.input Statement_Block(IO="file", filename="TAC_Block.csv", delimiter="\t")
.decl Variable_Value(var: Variable, value: Value)
.input Variable_Value(IO="file", filename="TAC_Variable_Value.csv", delimiter="\t")

// Control flow & functions
.decl LocalBlockEdge(block: Block, nextBlock: Block)
.input LocalBlockEdge(IO="file", filename="LocalBlockEdge.csv", delimiter="\t")

.decl FallthroughEdge(block: Block, nextBlock: Block)
.input FallthroughEdge(IO="file", filename="FallthroughEdge.csv", delimiter="\t")

.decl CallGraphEdge(block: Block, function: Function)
.input CallGraphEdge(IO="file", filename="FunctionCall.csv", delimiter="\t")

.decl FunctionCallReturn(block: Block, function: Function, return: Block)
.input FunctionCallReturn(IO="file", filename="FunctionCallReturn.csv", delimiter="\t")

.decl IsFunction(func: Function)
.input IsFunction(IO="file", filename="Function.csv", delimiter="\t")

.decl IsPublicFunction(func: Function)
.input IsPublicFunction(IO="file", filename="PublicFunctionEntry.csv", delimiter="\t")

.decl HighLevelFunctionName(func: Function, name: symbol)
.input HighLevelFunctionName(IO="file", filename="HighLevelFunctionName.csv", delimiter="\t")

// Special instructions & data flow
// Actuals are on the function call side
.decl ActualArgs(caller: Block, a: Variable, pos: number)

ActualArgs(caller, a, pos - 1) :-
   Statement_Uses(s, a, pos),
   CALLPRIVATE(s, _),
   pos >= 1,
   Statement_Block(s, caller).

ActualArgs(caller, a, pos - 2) :-
   Statement_Uses(s, a, pos),
   CALLPRIVATEI(s, _, _),
   pos >= 2,
   Statement_Block(s, caller).

.decl ActualReturnArgs(caller: Block, a: Variable, pos: number)
.input ActualReturnArgs(IO="file", filename="ActualReturnArgs.csv", delimiter="\t")

// Actuals are on the function definition side
.decl FormalReturnArgs(fn: Function, a: Variable, pos: number)
FormalReturnArgs(fn, a, pos - 1) :-
   Statement_Uses(s, a, pos),
   RETURNPRIVATE(s, _),
   pos >= 1,
   Statement_Block(s, b),
   InFunction(b, fn).

FormalReturnArgs(fn, a, pos - 2) :-
   Statement_Uses(s, a, pos),
   RETURNPRIVATEI(s, _, _),
   pos >= 2,
   Statement_Block(s, b),
   InFunction(b, fn).


.decl FormalArgs(fn: Function, a: Variable, pos: number)
.input FormalArgs(IO="file", filename="FormalArgs.csv", delimiter="\t")


.decl Statement_Uses(stmt: Statement, var: Variable, i: number)
.input Statement_Uses(IO="file", filename="TAC_Use.csv", delimiter="\t")
.decl Statement_Defines(stmt: Statement, var: Variable, n: number)
.input Statement_Defines(IO="file", filename="TAC_Def.csv", delimiter="\t")

// Partial order
.decl Statement_Next(stmt: Statement, next: Statement)
.input Statement_Next(IO="file", filename="Statement_Next.csv", delimiter="\t")

.decl FunctionEntry(block: Block)
.input FunctionEntry(IO="file", filename="Function.csv", delimiter="\t")

.decl FunctionExit(block: Block)
FunctionExit(block) :-
   LocalBlockEdge(_, block),
   !LocalBlockEdge(block, _).

.decl CastBlockToFunction(block: symbol)
CastBlockToFunction(block) :- FunctionEntry(block).

.decl InFunction(block: Block, function: Function)
InFunction(block, function) :-
   CastBlockToFunction(block),
   CastBlockToFunction(function),
   ord(block) = ord(function).

InFunction(block, function) :-
   InFunction(prev, function),
   LocalBlockEdge(prev, block).


.decl NotTailStatement(s: Statement)

NotTailStatement(s) :-
   Statement_Block(s, b),
   Statement_Next(s, n),
   Statement_Block(n, b).

.decl Block_Tail(b: Block, t: Statement)

Block_Tail(b, t) :-
   Statement_Block(t, b),
   !NotTailStatement(t).

.decl IsBlock(b: Block)

IsBlock(b) :-
  Statement_Block(_, b).

.decl Variable_ConstValue(variable: Variable, value: Value)

Variable_ConstValue(v, val) :-
   Variable_Value(v, val),
   val != "Dynamic",
   val != "Any",
   val != "Address".

/*
Variable_ConstValue(v, val) :-
   Variable_ConstValue(v_in, val),
   PHI(_, v_in, v).
*/

.decl Mask_Length(mask: Value, bytes: number)
.input Mask_Length(IO="file", filename="Mask_Length.csv", delimiter="\t")