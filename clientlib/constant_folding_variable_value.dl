#pragma once

#include "constants.dl"

.comp VariableValueConstantFolding {
    .decl Statement_Uses(stmt: Statement, var: Variable, n: number)
    .decl Statement_Defines(stmt: Statement, var: Variable)

    .decl Initial_Value(variable: Variable, value: Value)
    
    // Output
    .decl Variable_Value(variable: Variable, value: Value)

    Variable_Value(variable, value) :-
        Initial_Value(variable, value).

    .init variableValueConstantFolding = ConstantFolding

    .decl BinopStatementOpAndArgs(stmt: Statement, op: symbol, a: Variable, b: Variable)
    BinopStatementOpAndArgs(stmt, op, a, b) :-
        Statement_Opcode(stmt, op),
        Statement_Uses(stmt, a, 0),
        Statement_Uses(stmt, b, 1).

    .decl BinopStatementOpAndConstantArgValues(stmt: Statement, op: symbol, a_val: Value, b_val: Value)
    BinopStatementOpAndConstantArgValues(stmt, op, a_val, b_val) :-
        Variable_Value(a, a_val),
        BinopStatementOpAndArgs(stmt, op, a, b),
        Variable_Value(b, b_val).
    .plan 1:(3,2,1)

    .decl UnopStatementOpAndArgs(stmt: Statement, op: symbol, a: Variable)
    .output UnopStatementOpAndArgs
    UnopStatementOpAndArgs(stmt, op, a) :-
        Statement_Opcode(stmt, op),
        Statement_Uses(stmt, a, 0),
        !Statement_Uses(stmt, _, 1).

    .decl UnopStatementOpAndConstantArgValues(stmt: Statement, op: symbol, a_val: Value)
    UnopStatementOpAndConstantArgValues(stmt, op, a_val) :-
        Variable_Value(a, a_val),
        UnopStatementOpAndArgs(stmt, op, a).


    // Constant fold of variables holding unique constant numeric values
    variableValueConstantFolding.RequestConstantFold2(op, a_val, b_val) :-
      BinopStatementOpAndConstantArgValues(_, op, a_val, b_val).

    variableValueConstantFolding.RequestConstantFold1(op, a_val) :-
      UnopStatementOpAndConstantArgValues(_, op, a_val).

    
    Variable_Value(to, result) :-
      variableValueConstantFolding.ConstantFoldResult2(op, a_val, b_val, result),
      BinopStatementOpAndConstantArgValues(stmt, op, a_val, b_val),
      Statement_Defines(stmt, to).
     .plan 1:(2,1,3)

    .output variableValueConstantFolding.RequestConstantFold1

    Variable_Value(to, result) :-
      variableValueConstantFolding.ConstantFoldResult1(op, a_val, result),
      UnopStatementOpAndConstantArgValues(stmt, op, a_val),
      Statement_Defines(stmt, to).
}
