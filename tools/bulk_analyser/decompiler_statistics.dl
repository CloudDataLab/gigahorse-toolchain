.decl BlockJumpNoTarget(stmt:Statement)
.output BlockJumpNoTarget       

BlockJumpNoTarget(headStmt) :-
  block = [headStmt],
  ReachableContext(ctx, block),
  BasicBlock_Tail(block, stmt),
  JUMP(stmt),
  !BlockJumpTarget(_, block, _).

.decl HasAlternateTarget(ctx:Context, block:Block, stmt:Statement)
     
HasAlternateTarget(ctx, block, stmt) :-
  ReachableContext(ctx, block),
  BasicBlock_Tail(block, stmt),
  JUMPI(stmt),
  BlockJumpTarget(ctx, block, realValue),
  BlockJumpTarget(ctx, block, realValue2),
  realValue != realValue2.

BlockJumpNoTarget(headStmt) :-
  block = [headStmt],
  ReachableContext(ctx, block),
  BasicBlock_Tail(block, stmt),
  JUMPI(stmt),
  !HasAlternateTarget(_, block, stmt).

.decl InsensBlockInputContents(block:Block, index:number, value:Value)
.output InsensBlockInputContents

InsensBlockInputContents(block, index, value) :-
  BlockInputContents(_, block, index, value).

.decl TosOutput(stmt: Statement, abc:symbol, alias:number, value:symbol, xyz:symbol, opcode:symbol, delta:number)
.output TosOutput      

TosOutput(stmt, "::", alias, value, "<-", opcode, delta) :-
  LocalStackContents(stmt, 0, [alias, value]),
  Statement_Opcode(stmt, opcode),
  StatementStackDelta(stmt, delta).

.decl MissingInfo(stmt:Statement, opcode:Opcode)
.output MissingInfo

MissingInfo(stmt, opcode) :-
  Statement_Opcode(stmt, opcode),
  OpcodePushWords(opcode, n), n>0,
  !LocalStackContents(stmt, 0, _),
  !OpcodePossiblyHalts(opcode).
