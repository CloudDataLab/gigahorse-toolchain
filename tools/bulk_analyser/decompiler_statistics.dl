.output IsBasicBlockHead
.output IsBasicBlockTail
.output PushValue

// Fills disk too quickly
//.output BlockOutputContents

.output BlockJumpTarget
.output LocalStackContents
.output BlockEdge


.decl InsBlockEdge(from: Statement, to:Statement)
.output InsBlockEdge

        
InsBlockEdge(from, to) :-
   BlockEdge(_, [from], _, [to]).

.output Stmt_BasicBlockHead
.output Statement_Opcode
        
.decl InsBlockJumpTarget(stmt:Statement, target: symbol)
.output InsBlockJumpTarget       

InsBlockJumpTarget(headStmt, target) :-
  block = [headStmt],
  ReachableContext(ctx, block),
  BlockJumpValidTarget(ctx, block, _, [target]).

.decl PolymorphicTarget(headStmt: Statement)
.output PolymorphicTarget      

PolymorphicTarget(headStmt) :-
  InsBlockJumpTarget(headStmt, target1),
  InsBlockJumpTarget(headStmt, target2),
  target1 != target2.

.decl BlockJumpAnyTarget(headStmt:Statement)
.output BlockJumpAnyTarget


BlockJumpAnyTarget(headStmt) :-
   BlockJumpTarget(ctx, [headStmt], targetVar),
   Variable_Value(targetVar, target),
  (DynamicValue(target) ; AnyValue(target)).

.decl InsensBlockInputContents(block:Block, index:number, var:Variable)
.output InsensBlockInputContents

InsensBlockInputContents(block, index, value) :-
  BlockInputContents(_, block, index, value).

.decl TosOutput(stmt: Statement, abc:symbol, valueOrAlias:number, xyz:symbol, opcode:symbol, delta:number)
.output TosOutput      

TosOutput(stmt, "::", valueOrAlias, "<-", opcode, delta) :-
  LocalStackContents(stmt, 0, valueOrAlias),
  Statement_Opcode(stmt, opcode),
  StatementStackDelta(stmt, delta).

.decl MissingInfo(stmt:Statement, opcode:Opcode)
.output MissingInfo

MissingInfo(stmt, opcode) :-
  Statement_Opcode(stmt, opcode),
  OpcodePushWords(opcode, n), n>0,
  !LocalStackContents(stmt, 0, _),
  !OpcodePossiblyHalts(opcode).

.decl PublicFunctionEntryOut(stmt: Statement, sigHash: Value)
.output PublicFunctionEntryOut

PublicFunctionEntryOut(stmt, sigHash) :-
   PublicFunctionEntry([stmt], sigHash).