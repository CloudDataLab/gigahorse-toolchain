.decl InsBlockJumpTarget(stmt:Statement, target: symbol)
.output InsBlockJumpTarget       

InsBlockJumpTarget(headStmt, target) :-
  block = [headStmt],
  ReachableContext(ctx, block),
  BasicBlock_Tail(block, stmt),
  (JUMP(stmt) ; JUMPI(stmt)),
  BlockJumpValidTarget(ctx, block, target).

.decl PolymorphicTarget(headStmt: Statement)
.output PolymorphicTarget      

PolymorphicTarget(headStmt) :-
  InsBlockJumpTarget(headStmt, target1),
  InsBlockJumpTarget(headStmt, target2),
  target1 != target2.

.decl BlockJumpValidTarget(ctx:Context, block:Block, target:Value)

BlockJumpValidTarget(ctx, block, target) :-
  BlockJumpTarget(ctx, block, target),
  ConcreteValue(target).                    

.decl InsensBlockInputContents(block:Block, index:number, value:Value)
.output InsensBlockInputContents

InsensBlockInputContents(block, index, value) :-
  BlockInputContents(_, block, index, value).

.decl TosOutput(stmt: Statement, abc:symbol, alias:number, value:symbol, xyz:symbol, opcode:symbol, delta:number)
.output TosOutput      

TosOutput(stmt, "::", alias, value, "<-", opcode, delta) :-
  LocalStackContents(stmt, 0, [alias, value]),
  Statement_Opcode(stmt, opcode),
  StatementStackDelta(stmt, delta).

.decl MissingInfo(stmt:Statement, opcode:Opcode)
.output MissingInfo

MissingInfo(stmt, opcode) :-
  Statement_Opcode(stmt, opcode),
  OpcodePushWords(opcode, n), n>0,
  !LocalStackContents(stmt, 0, _),
  !OpcodePossiblyHalts(opcode).
